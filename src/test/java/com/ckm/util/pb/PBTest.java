// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

package com.ckm.util.pb;

public final class PBTest {
  private PBTest() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code tutorial.EnumType}
   */
  public enum EnumType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MOBILE = 0;</code>
     */
    MOBILE(0),
    /**
     * <code>HOME = 1;</code>
     */
    HOME(1),
    /**
     * <code>WORK = 2;</code>
     */
    WORK(2),
    ;

    /**
     * <code>MOBILE = 0;</code>
     */
    public static final int MOBILE_VALUE = 0;
    /**
     * <code>HOME = 1;</code>
     */
    public static final int HOME_VALUE = 1;
    /**
     * <code>WORK = 2;</code>
     */
    public static final int WORK_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumType valueOf(int value) {
      return forNumber(value);
    }

    public static EnumType forNumber(int value) {
      switch (value) {
        case 0: return MOBILE;
        case 1: return HOME;
        case 2: return WORK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumType>() {
            public EnumType findValueByNumber(int number) {
              return EnumType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ckm.util.pb.PBTest.getDescriptor().getEnumTypes().get(0);
    }

    private static final EnumType[] VALUES = values();

    public static EnumType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:tutorial.EnumType)
  }

  public interface TestAllTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tutorial.TestAllType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 int32 = 1;</code>
     */
    boolean hasInt32();
    /**
     * <code>optional int32 int32 = 1;</code>
     */
    int getInt32();

    /**
     * <code>optional int64 int64 = 2;</code>
     */
    boolean hasInt64();
    /**
     * <code>optional int64 int64 = 2;</code>
     */
    long getInt64();

    /**
     * <code>optional uint32 uint32 = 3;</code>
     */
    boolean hasUint32();
    /**
     * <code>optional uint32 uint32 = 3;</code>
     */
    int getUint32();

    /**
     * <code>optional uint64 uint64 = 4;</code>
     */
    boolean hasUint64();
    /**
     * <code>optional uint64 uint64 = 4;</code>
     */
    long getUint64();

    /**
     * <code>optional sint32 sint32 = 5;</code>
     */
    boolean hasSint32();
    /**
     * <code>optional sint32 sint32 = 5;</code>
     */
    int getSint32();

    /**
     * <code>optional sint64 sint64 = 6;</code>
     */
    boolean hasSint64();
    /**
     * <code>optional sint64 sint64 = 6;</code>
     */
    long getSint64();

    /**
     * <code>optional bool bool = 7;</code>
     */
    boolean hasBool();
    /**
     * <code>optional bool bool = 7;</code>
     */
    boolean getBool();

    /**
     * <code>optional fixed64 fixed64 = 9;</code>
     */
    boolean hasFixed64();
    /**
     * <code>optional fixed64 fixed64 = 9;</code>
     */
    long getFixed64();

    /**
     * <code>optional sfixed64 sfixed64 = 10;</code>
     */
    boolean hasSfixed64();
    /**
     * <code>optional sfixed64 sfixed64 = 10;</code>
     */
    long getSfixed64();

    /**
     * <code>optional double double = 11;</code>
     */
    boolean hasDouble();
    /**
     * <code>optional double double = 11;</code>
     */
    double getDouble();

    /**
     * <code>optional string string = 12;</code>
     */
    boolean hasString();
    /**
     * <code>optional string string = 12;</code>
     */
    java.lang.String getString();
    /**
     * <code>optional string string = 12;</code>
     */
    com.google.protobuf.ByteString
        getStringBytes();

    /**
     * <code>optional fixed32 fixed32 = 14;</code>
     */
    boolean hasFixed32();
    /**
     * <code>optional fixed32 fixed32 = 14;</code>
     */
    int getFixed32();

    /**
     * <code>optional sfixed32 sfixed32 = 15;</code>
     */
    boolean hasSfixed32();
    /**
     * <code>optional sfixed32 sfixed32 = 15;</code>
     */
    int getSfixed32();

    /**
     * <code>optional float float = 16;</code>
     */
    boolean hasFloat();
    /**
     * <code>optional float float = 16;</code>
     */
    float getFloat();

    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */
    int getBaseMapCount();
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */
    boolean containsBaseMap(
        java.lang.String key);
    /**
     * Use {@link #getBaseMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getBaseMap();
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getBaseMapMap();
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */

    java.lang.String getBaseMapOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */

    java.lang.String getBaseMapOrThrow(
        java.lang.String key);

    /**
     * <code>optional .tutorial.XMessage x_message = 18;</code>
     */
    boolean hasXMessage();
    /**
     * <code>optional .tutorial.XMessage x_message = 18;</code>
     */
    com.ckm.util.pb.PBTest.XMessage getXMessage();
    /**
     * <code>optional .tutorial.XMessage x_message = 18;</code>
     */
    com.ckm.util.pb.PBTest.XMessageOrBuilder getXMessageOrBuilder();

    /**
     * <code>optional .tutorial.EnumType type = 19;</code>
     */
    boolean hasType();
    /**
     * <code>optional .tutorial.EnumType type = 19;</code>
     */
    com.ckm.util.pb.PBTest.EnumType getType();

    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    java.util.List<com.ckm.util.pb.PBTest.XMessage> 
        getXMessageListList();
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    com.ckm.util.pb.PBTest.XMessage getXMessageList(int index);
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    int getXMessageListCount();
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    java.util.List<? extends com.ckm.util.pb.PBTest.XMessageOrBuilder> 
        getXMessageListOrBuilderList();
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    com.ckm.util.pb.PBTest.XMessageOrBuilder getXMessageListOrBuilder(
        int index);

    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */
    int getXMessageMapCount();
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */
    boolean containsXMessageMap(
        java.lang.String key);
    /**
     * Use {@link #getXMessageMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
    getXMessageMap();
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */
    java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
    getXMessageMapMap();
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */

    com.ckm.util.pb.PBTest.XMessage getXMessageMapOrDefault(
        java.lang.String key,
        com.ckm.util.pb.PBTest.XMessage defaultValue);
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */

    com.ckm.util.pb.PBTest.XMessage getXMessageMapOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code tutorial.TestAllType}
   */
  public  static final class TestAllType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tutorial.TestAllType)
      TestAllTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TestAllType.newBuilder() to construct.
    private TestAllType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TestAllType() {
      int32_ = 0;
      int64_ = 0L;
      uint32_ = 0;
      uint64_ = 0L;
      sint32_ = 0;
      sint64_ = 0L;
      bool_ = false;
      fixed64_ = 0L;
      sfixed64_ = 0L;
      double_ = 0D;
      string_ = "";
      fixed32_ = 0;
      sfixed32_ = 0;
      float_ = 0F;
      type_ = 0;
      xMessageList_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TestAllType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              int32_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              int64_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              uint32_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              uint64_ = input.readUInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              sint32_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              sint64_ = input.readSInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              bool_ = input.readBool();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000080;
              fixed64_ = input.readFixed64();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000100;
              sfixed64_ = input.readSFixed64();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000200;
              double_ = input.readDouble();
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000400;
              string_ = bs;
              break;
            }
            case 117: {
              bitField0_ |= 0x00000800;
              fixed32_ = input.readFixed32();
              break;
            }
            case 125: {
              bitField0_ |= 0x00001000;
              sfixed32_ = input.readSFixed32();
              break;
            }
            case 133: {
              bitField0_ |= 0x00002000;
              float_ = input.readFloat();
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                baseMap_ = com.google.protobuf.MapField.newMapField(
                    BaseMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00004000;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              baseMap__ = input.readMessage(
                  BaseMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              baseMap_.getMutableMap().put(
                  baseMap__.getKey(), baseMap__.getValue());
              break;
            }
            case 146: {
              com.ckm.util.pb.PBTest.XMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = xMessage_.toBuilder();
              }
              xMessage_ = input.readMessage(com.ckm.util.pb.PBTest.XMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(xMessage_);
                xMessage_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 152: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              com.ckm.util.pb.PBTest.EnumType value = com.ckm.util.pb.PBTest.EnumType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(19, rawValue);
              } else {
                bitField0_ |= 0x00008000;
                type_ = rawValue;
              }
              break;
            }
            case 162: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                xMessageList_ = new java.util.ArrayList<com.ckm.util.pb.PBTest.XMessage>();
                mutable_bitField0_ |= 0x00020000;
              }
              xMessageList_.add(
                  input.readMessage(com.ckm.util.pb.PBTest.XMessage.PARSER, extensionRegistry));
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                xMessageMap_ = com.google.protobuf.MapField.newMapField(
                    XMessageMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00040000;
              }
              com.google.protobuf.MapEntry<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
              xMessageMap__ = input.readMessage(
                  XMessageMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              xMessageMap_.getMutableMap().put(
                  xMessageMap__.getKey(), xMessageMap__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          xMessageList_ = java.util.Collections.unmodifiableList(xMessageList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_TestAllType_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 17:
          return internalGetBaseMap();
        case 21:
          return internalGetXMessageMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_TestAllType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ckm.util.pb.PBTest.TestAllType.class, com.ckm.util.pb.PBTest.TestAllType.Builder.class);
    }

    private int bitField0_;
    public static final int INT32_FIELD_NUMBER = 1;
    private int int32_;
    /**
     * <code>optional int32 int32 = 1;</code>
     */
    public boolean hasInt32() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 int32 = 1;</code>
     */
    public int getInt32() {
      return int32_;
    }

    public static final int INT64_FIELD_NUMBER = 2;
    private long int64_;
    /**
     * <code>optional int64 int64 = 2;</code>
     */
    public boolean hasInt64() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 int64 = 2;</code>
     */
    public long getInt64() {
      return int64_;
    }

    public static final int UINT32_FIELD_NUMBER = 3;
    private int uint32_;
    /**
     * <code>optional uint32 uint32 = 3;</code>
     */
    public boolean hasUint32() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 uint32 = 3;</code>
     */
    public int getUint32() {
      return uint32_;
    }

    public static final int UINT64_FIELD_NUMBER = 4;
    private long uint64_;
    /**
     * <code>optional uint64 uint64 = 4;</code>
     */
    public boolean hasUint64() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint64 uint64 = 4;</code>
     */
    public long getUint64() {
      return uint64_;
    }

    public static final int SINT32_FIELD_NUMBER = 5;
    private int sint32_;
    /**
     * <code>optional sint32 sint32 = 5;</code>
     */
    public boolean hasSint32() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 sint32 = 5;</code>
     */
    public int getSint32() {
      return sint32_;
    }

    public static final int SINT64_FIELD_NUMBER = 6;
    private long sint64_;
    /**
     * <code>optional sint64 sint64 = 6;</code>
     */
    public boolean hasSint64() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint64 sint64 = 6;</code>
     */
    public long getSint64() {
      return sint64_;
    }

    public static final int BOOL_FIELD_NUMBER = 7;
    private boolean bool_;
    /**
     * <code>optional bool bool = 7;</code>
     */
    public boolean hasBool() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool bool = 7;</code>
     */
    public boolean getBool() {
      return bool_;
    }

    public static final int FIXED64_FIELD_NUMBER = 9;
    private long fixed64_;
    /**
     * <code>optional fixed64 fixed64 = 9;</code>
     */
    public boolean hasFixed64() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional fixed64 fixed64 = 9;</code>
     */
    public long getFixed64() {
      return fixed64_;
    }

    public static final int SFIXED64_FIELD_NUMBER = 10;
    private long sfixed64_;
    /**
     * <code>optional sfixed64 sfixed64 = 10;</code>
     */
    public boolean hasSfixed64() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sfixed64 sfixed64 = 10;</code>
     */
    public long getSfixed64() {
      return sfixed64_;
    }

    public static final int DOUBLE_FIELD_NUMBER = 11;
    private double double_;
    /**
     * <code>optional double double = 11;</code>
     */
    public boolean hasDouble() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double double = 11;</code>
     */
    public double getDouble() {
      return double_;
    }

    public static final int STRING_FIELD_NUMBER = 12;
    private volatile java.lang.Object string_;
    /**
     * <code>optional string string = 12;</code>
     */
    public boolean hasString() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string string = 12;</code>
     */
    public java.lang.String getString() {
      java.lang.Object ref = string_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          string_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string string = 12;</code>
     */
    public com.google.protobuf.ByteString
        getStringBytes() {
      java.lang.Object ref = string_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        string_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIXED32_FIELD_NUMBER = 14;
    private int fixed32_;
    /**
     * <code>optional fixed32 fixed32 = 14;</code>
     */
    public boolean hasFixed32() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional fixed32 fixed32 = 14;</code>
     */
    public int getFixed32() {
      return fixed32_;
    }

    public static final int SFIXED32_FIELD_NUMBER = 15;
    private int sfixed32_;
    /**
     * <code>optional sfixed32 sfixed32 = 15;</code>
     */
    public boolean hasSfixed32() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional sfixed32 sfixed32 = 15;</code>
     */
    public int getSfixed32() {
      return sfixed32_;
    }

    public static final int FLOAT_FIELD_NUMBER = 16;
    private float float_;
    /**
     * <code>optional float float = 16;</code>
     */
    public boolean hasFloat() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float float = 16;</code>
     */
    public float getFloat() {
      return float_;
    }

    public static final int BASEMAP_FIELD_NUMBER = 17;
    private static final class BaseMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_TestAllType_BaseMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> baseMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetBaseMap() {
      if (baseMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            BaseMapDefaultEntryHolder.defaultEntry);
      }
      return baseMap_;
    }

    public int getBaseMapCount() {
      return internalGetBaseMap().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */

    public boolean containsBaseMap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetBaseMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getBaseMapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getBaseMap() {
      return getBaseMapMap();
    }
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getBaseMapMap() {
      return internalGetBaseMap().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */

    public java.lang.String getBaseMapOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetBaseMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; baseMap = 17;</code>
     */

    public java.lang.String getBaseMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetBaseMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int X_MESSAGE_FIELD_NUMBER = 18;
    private com.ckm.util.pb.PBTest.XMessage xMessage_;
    /**
     * <code>optional .tutorial.XMessage x_message = 18;</code>
     */
    public boolean hasXMessage() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .tutorial.XMessage x_message = 18;</code>
     */
    public com.ckm.util.pb.PBTest.XMessage getXMessage() {
      return xMessage_ == null ? com.ckm.util.pb.PBTest.XMessage.getDefaultInstance() : xMessage_;
    }
    /**
     * <code>optional .tutorial.XMessage x_message = 18;</code>
     */
    public com.ckm.util.pb.PBTest.XMessageOrBuilder getXMessageOrBuilder() {
      return xMessage_ == null ? com.ckm.util.pb.PBTest.XMessage.getDefaultInstance() : xMessage_;
    }

    public static final int TYPE_FIELD_NUMBER = 19;
    private int type_;
    /**
     * <code>optional .tutorial.EnumType type = 19;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .tutorial.EnumType type = 19;</code>
     */
    public com.ckm.util.pb.PBTest.EnumType getType() {
      @SuppressWarnings("deprecation")
      com.ckm.util.pb.PBTest.EnumType result = com.ckm.util.pb.PBTest.EnumType.valueOf(type_);
      return result == null ? com.ckm.util.pb.PBTest.EnumType.MOBILE : result;
    }

    public static final int X_MESSAGE_LIST_FIELD_NUMBER = 20;
    private java.util.List<com.ckm.util.pb.PBTest.XMessage> xMessageList_;
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    public java.util.List<com.ckm.util.pb.PBTest.XMessage> getXMessageListList() {
      return xMessageList_;
    }
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    public java.util.List<? extends com.ckm.util.pb.PBTest.XMessageOrBuilder> 
        getXMessageListOrBuilderList() {
      return xMessageList_;
    }
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    public int getXMessageListCount() {
      return xMessageList_.size();
    }
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    public com.ckm.util.pb.PBTest.XMessage getXMessageList(int index) {
      return xMessageList_.get(index);
    }
    /**
     * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
     */
    public com.ckm.util.pb.PBTest.XMessageOrBuilder getXMessageListOrBuilder(
        int index) {
      return xMessageList_.get(index);
    }

    public static final int X_MESSAGE_MAP_FIELD_NUMBER = 21;
    private static final class XMessageMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, com.ckm.util.pb.PBTest.XMessage> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, com.ckm.util.pb.PBTest.XMessage>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_TestAllType_XMessageMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.ckm.util.pb.PBTest.XMessage.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, com.ckm.util.pb.PBTest.XMessage> xMessageMap_;
    private com.google.protobuf.MapField<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
    internalGetXMessageMap() {
      if (xMessageMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            XMessageMapDefaultEntryHolder.defaultEntry);
      }
      return xMessageMap_;
    }

    public int getXMessageMapCount() {
      return internalGetXMessageMap().getMap().size();
    }
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */

    public boolean containsXMessageMap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetXMessageMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getXMessageMapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> getXMessageMap() {
      return getXMessageMapMap();
    }
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */

    public java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> getXMessageMapMap() {
      return internalGetXMessageMap().getMap();
    }
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */

    public com.ckm.util.pb.PBTest.XMessage getXMessageMapOrDefault(
        java.lang.String key,
        com.ckm.util.pb.PBTest.XMessage defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> map =
          internalGetXMessageMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
     */

    public com.ckm.util.pb.PBTest.XMessage getXMessageMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> map =
          internalGetXMessageMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, int32_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, int64_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, uint32_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(4, uint64_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, sint32_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt64(6, sint64_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, bool_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFixed64(9, fixed64_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSFixed64(10, sfixed64_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(11, double_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, string_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFixed32(14, fixed32_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeSFixed32(15, sfixed32_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(16, float_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetBaseMap(),
          BaseMapDefaultEntryHolder.defaultEntry,
          17);
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(18, getXMessage());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeEnum(19, type_);
      }
      for (int i = 0; i < xMessageList_.size(); i++) {
        output.writeMessage(20, xMessageList_.get(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetXMessageMap(),
          XMessageMapDefaultEntryHolder.defaultEntry,
          21);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, int32_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, int64_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, uint32_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, uint64_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, sint32_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(6, sint64_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, bool_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(9, fixed64_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(10, sfixed64_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, double_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, string_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(14, fixed32_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(15, sfixed32_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, float_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetBaseMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        baseMap__ = BaseMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(17, baseMap__);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getXMessage());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(19, type_);
      }
      for (int i = 0; i < xMessageList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, xMessageList_.get(i));
      }
      for (java.util.Map.Entry<java.lang.String, com.ckm.util.pb.PBTest.XMessage> entry
           : internalGetXMessageMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
        xMessageMap__ = XMessageMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(21, xMessageMap__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.ckm.util.pb.PBTest.TestAllType)) {
        return super.equals(obj);
      }
      com.ckm.util.pb.PBTest.TestAllType other = (com.ckm.util.pb.PBTest.TestAllType) obj;

      boolean result = true;
      result = result && (hasInt32() == other.hasInt32());
      if (hasInt32()) {
        result = result && (getInt32()
            == other.getInt32());
      }
      result = result && (hasInt64() == other.hasInt64());
      if (hasInt64()) {
        result = result && (getInt64()
            == other.getInt64());
      }
      result = result && (hasUint32() == other.hasUint32());
      if (hasUint32()) {
        result = result && (getUint32()
            == other.getUint32());
      }
      result = result && (hasUint64() == other.hasUint64());
      if (hasUint64()) {
        result = result && (getUint64()
            == other.getUint64());
      }
      result = result && (hasSint32() == other.hasSint32());
      if (hasSint32()) {
        result = result && (getSint32()
            == other.getSint32());
      }
      result = result && (hasSint64() == other.hasSint64());
      if (hasSint64()) {
        result = result && (getSint64()
            == other.getSint64());
      }
      result = result && (hasBool() == other.hasBool());
      if (hasBool()) {
        result = result && (getBool()
            == other.getBool());
      }
      result = result && (hasFixed64() == other.hasFixed64());
      if (hasFixed64()) {
        result = result && (getFixed64()
            == other.getFixed64());
      }
      result = result && (hasSfixed64() == other.hasSfixed64());
      if (hasSfixed64()) {
        result = result && (getSfixed64()
            == other.getSfixed64());
      }
      result = result && (hasDouble() == other.hasDouble());
      if (hasDouble()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getDouble())
            == java.lang.Double.doubleToLongBits(
                other.getDouble()));
      }
      result = result && (hasString() == other.hasString());
      if (hasString()) {
        result = result && getString()
            .equals(other.getString());
      }
      result = result && (hasFixed32() == other.hasFixed32());
      if (hasFixed32()) {
        result = result && (getFixed32()
            == other.getFixed32());
      }
      result = result && (hasSfixed32() == other.hasSfixed32());
      if (hasSfixed32()) {
        result = result && (getSfixed32()
            == other.getSfixed32());
      }
      result = result && (hasFloat() == other.hasFloat());
      if (hasFloat()) {
        result = result && (
            java.lang.Float.floatToIntBits(getFloat())
            == java.lang.Float.floatToIntBits(
                other.getFloat()));
      }
      result = result && internalGetBaseMap().equals(
          other.internalGetBaseMap());
      result = result && (hasXMessage() == other.hasXMessage());
      if (hasXMessage()) {
        result = result && getXMessage()
            .equals(other.getXMessage());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && getXMessageListList()
          .equals(other.getXMessageListList());
      result = result && internalGetXMessageMap().equals(
          other.internalGetXMessageMap());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInt32()) {
        hash = (37 * hash) + INT32_FIELD_NUMBER;
        hash = (53 * hash) + getInt32();
      }
      if (hasInt64()) {
        hash = (37 * hash) + INT64_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getInt64());
      }
      if (hasUint32()) {
        hash = (37 * hash) + UINT32_FIELD_NUMBER;
        hash = (53 * hash) + getUint32();
      }
      if (hasUint64()) {
        hash = (37 * hash) + UINT64_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUint64());
      }
      if (hasSint32()) {
        hash = (37 * hash) + SINT32_FIELD_NUMBER;
        hash = (53 * hash) + getSint32();
      }
      if (hasSint64()) {
        hash = (37 * hash) + SINT64_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getSint64());
      }
      if (hasBool()) {
        hash = (37 * hash) + BOOL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBool());
      }
      if (hasFixed64()) {
        hash = (37 * hash) + FIXED64_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFixed64());
      }
      if (hasSfixed64()) {
        hash = (37 * hash) + SFIXED64_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getSfixed64());
      }
      if (hasDouble()) {
        hash = (37 * hash) + DOUBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDouble()));
      }
      if (hasString()) {
        hash = (37 * hash) + STRING_FIELD_NUMBER;
        hash = (53 * hash) + getString().hashCode();
      }
      if (hasFixed32()) {
        hash = (37 * hash) + FIXED32_FIELD_NUMBER;
        hash = (53 * hash) + getFixed32();
      }
      if (hasSfixed32()) {
        hash = (37 * hash) + SFIXED32_FIELD_NUMBER;
        hash = (53 * hash) + getSfixed32();
      }
      if (hasFloat()) {
        hash = (37 * hash) + FLOAT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFloat());
      }
      if (!internalGetBaseMap().getMap().isEmpty()) {
        hash = (37 * hash) + BASEMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetBaseMap().hashCode();
      }
      if (hasXMessage()) {
        hash = (37 * hash) + X_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getXMessage().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (getXMessageListCount() > 0) {
        hash = (37 * hash) + X_MESSAGE_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getXMessageListList().hashCode();
      }
      if (!internalGetXMessageMap().getMap().isEmpty()) {
        hash = (37 * hash) + X_MESSAGE_MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetXMessageMap().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.TestAllType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ckm.util.pb.PBTest.TestAllType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tutorial.TestAllType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tutorial.TestAllType)
        com.ckm.util.pb.PBTest.TestAllTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_TestAllType_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 17:
            return internalGetBaseMap();
          case 21:
            return internalGetXMessageMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 17:
            return internalGetMutableBaseMap();
          case 21:
            return internalGetMutableXMessageMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_TestAllType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ckm.util.pb.PBTest.TestAllType.class, com.ckm.util.pb.PBTest.TestAllType.Builder.class);
      }

      // Construct using com.ckm.util.pb.PBTest.TestAllType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getXMessageFieldBuilder();
          getXMessageListFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        int32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        int64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        uint32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        uint64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        sint32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        sint64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        bool_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        fixed64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        sfixed64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        double_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        string_ = "";
        bitField0_ = (bitField0_ & ~0x00000400);
        fixed32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        sfixed32_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        float_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        internalGetMutableBaseMap().clear();
        if (xMessageBuilder_ == null) {
          xMessage_ = null;
        } else {
          xMessageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (xMessageListBuilder_ == null) {
          xMessageList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          xMessageListBuilder_.clear();
        }
        internalGetMutableXMessageMap().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_TestAllType_descriptor;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.TestAllType getDefaultInstanceForType() {
        return com.ckm.util.pb.PBTest.TestAllType.getDefaultInstance();
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.TestAllType build() {
        com.ckm.util.pb.PBTest.TestAllType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.TestAllType buildPartial() {
        com.ckm.util.pb.PBTest.TestAllType result = new com.ckm.util.pb.PBTest.TestAllType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.int32_ = int32_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.int64_ = int64_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.uint32_ = uint32_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.uint64_ = uint64_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.sint32_ = sint32_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.sint64_ = sint64_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.bool_ = bool_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.fixed64_ = fixed64_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.sfixed64_ = sfixed64_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.double_ = double_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.string_ = string_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.fixed32_ = fixed32_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.sfixed32_ = sfixed32_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.float_ = float_;
        result.baseMap_ = internalGetBaseMap();
        result.baseMap_.makeImmutable();
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (xMessageBuilder_ == null) {
          result.xMessage_ = xMessage_;
        } else {
          result.xMessage_ = xMessageBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.type_ = type_;
        if (xMessageListBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            xMessageList_ = java.util.Collections.unmodifiableList(xMessageList_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.xMessageList_ = xMessageList_;
        } else {
          result.xMessageList_ = xMessageListBuilder_.build();
        }
        result.xMessageMap_ = internalGetXMessageMap();
        result.xMessageMap_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ckm.util.pb.PBTest.TestAllType) {
          return mergeFrom((com.ckm.util.pb.PBTest.TestAllType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ckm.util.pb.PBTest.TestAllType other) {
        if (other == com.ckm.util.pb.PBTest.TestAllType.getDefaultInstance()) return this;
        if (other.hasInt32()) {
          setInt32(other.getInt32());
        }
        if (other.hasInt64()) {
          setInt64(other.getInt64());
        }
        if (other.hasUint32()) {
          setUint32(other.getUint32());
        }
        if (other.hasUint64()) {
          setUint64(other.getUint64());
        }
        if (other.hasSint32()) {
          setSint32(other.getSint32());
        }
        if (other.hasSint64()) {
          setSint64(other.getSint64());
        }
        if (other.hasBool()) {
          setBool(other.getBool());
        }
        if (other.hasFixed64()) {
          setFixed64(other.getFixed64());
        }
        if (other.hasSfixed64()) {
          setSfixed64(other.getSfixed64());
        }
        if (other.hasDouble()) {
          setDouble(other.getDouble());
        }
        if (other.hasString()) {
          bitField0_ |= 0x00000400;
          string_ = other.string_;
          onChanged();
        }
        if (other.hasFixed32()) {
          setFixed32(other.getFixed32());
        }
        if (other.hasSfixed32()) {
          setSfixed32(other.getSfixed32());
        }
        if (other.hasFloat()) {
          setFloat(other.getFloat());
        }
        internalGetMutableBaseMap().mergeFrom(
            other.internalGetBaseMap());
        if (other.hasXMessage()) {
          mergeXMessage(other.getXMessage());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (xMessageListBuilder_ == null) {
          if (!other.xMessageList_.isEmpty()) {
            if (xMessageList_.isEmpty()) {
              xMessageList_ = other.xMessageList_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureXMessageListIsMutable();
              xMessageList_.addAll(other.xMessageList_);
            }
            onChanged();
          }
        } else {
          if (!other.xMessageList_.isEmpty()) {
            if (xMessageListBuilder_.isEmpty()) {
              xMessageListBuilder_.dispose();
              xMessageListBuilder_ = null;
              xMessageList_ = other.xMessageList_;
              bitField0_ = (bitField0_ & ~0x00020000);
              xMessageListBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getXMessageListFieldBuilder() : null;
            } else {
              xMessageListBuilder_.addAllMessages(other.xMessageList_);
            }
          }
        }
        internalGetMutableXMessageMap().mergeFrom(
            other.internalGetXMessageMap());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ckm.util.pb.PBTest.TestAllType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ckm.util.pb.PBTest.TestAllType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int int32_ ;
      /**
       * <code>optional int32 int32 = 1;</code>
       */
      public boolean hasInt32() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 int32 = 1;</code>
       */
      public int getInt32() {
        return int32_;
      }
      /**
       * <code>optional int32 int32 = 1;</code>
       */
      public Builder setInt32(int value) {
        bitField0_ |= 0x00000001;
        int32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 int32 = 1;</code>
       */
      public Builder clearInt32() {
        bitField0_ = (bitField0_ & ~0x00000001);
        int32_ = 0;
        onChanged();
        return this;
      }

      private long int64_ ;
      /**
       * <code>optional int64 int64 = 2;</code>
       */
      public boolean hasInt64() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 int64 = 2;</code>
       */
      public long getInt64() {
        return int64_;
      }
      /**
       * <code>optional int64 int64 = 2;</code>
       */
      public Builder setInt64(long value) {
        bitField0_ |= 0x00000002;
        int64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 int64 = 2;</code>
       */
      public Builder clearInt64() {
        bitField0_ = (bitField0_ & ~0x00000002);
        int64_ = 0L;
        onChanged();
        return this;
      }

      private int uint32_ ;
      /**
       * <code>optional uint32 uint32 = 3;</code>
       */
      public boolean hasUint32() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 uint32 = 3;</code>
       */
      public int getUint32() {
        return uint32_;
      }
      /**
       * <code>optional uint32 uint32 = 3;</code>
       */
      public Builder setUint32(int value) {
        bitField0_ |= 0x00000004;
        uint32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uint32 = 3;</code>
       */
      public Builder clearUint32() {
        bitField0_ = (bitField0_ & ~0x00000004);
        uint32_ = 0;
        onChanged();
        return this;
      }

      private long uint64_ ;
      /**
       * <code>optional uint64 uint64 = 4;</code>
       */
      public boolean hasUint64() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint64 uint64 = 4;</code>
       */
      public long getUint64() {
        return uint64_;
      }
      /**
       * <code>optional uint64 uint64 = 4;</code>
       */
      public Builder setUint64(long value) {
        bitField0_ |= 0x00000008;
        uint64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 uint64 = 4;</code>
       */
      public Builder clearUint64() {
        bitField0_ = (bitField0_ & ~0x00000008);
        uint64_ = 0L;
        onChanged();
        return this;
      }

      private int sint32_ ;
      /**
       * <code>optional sint32 sint32 = 5;</code>
       */
      public boolean hasSint32() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 sint32 = 5;</code>
       */
      public int getSint32() {
        return sint32_;
      }
      /**
       * <code>optional sint32 sint32 = 5;</code>
       */
      public Builder setSint32(int value) {
        bitField0_ |= 0x00000010;
        sint32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 sint32 = 5;</code>
       */
      public Builder clearSint32() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sint32_ = 0;
        onChanged();
        return this;
      }

      private long sint64_ ;
      /**
       * <code>optional sint64 sint64 = 6;</code>
       */
      public boolean hasSint64() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint64 sint64 = 6;</code>
       */
      public long getSint64() {
        return sint64_;
      }
      /**
       * <code>optional sint64 sint64 = 6;</code>
       */
      public Builder setSint64(long value) {
        bitField0_ |= 0x00000020;
        sint64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint64 sint64 = 6;</code>
       */
      public Builder clearSint64() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sint64_ = 0L;
        onChanged();
        return this;
      }

      private boolean bool_ ;
      /**
       * <code>optional bool bool = 7;</code>
       */
      public boolean hasBool() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool bool = 7;</code>
       */
      public boolean getBool() {
        return bool_;
      }
      /**
       * <code>optional bool bool = 7;</code>
       */
      public Builder setBool(boolean value) {
        bitField0_ |= 0x00000040;
        bool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bool = 7;</code>
       */
      public Builder clearBool() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bool_ = false;
        onChanged();
        return this;
      }

      private long fixed64_ ;
      /**
       * <code>optional fixed64 fixed64 = 9;</code>
       */
      public boolean hasFixed64() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional fixed64 fixed64 = 9;</code>
       */
      public long getFixed64() {
        return fixed64_;
      }
      /**
       * <code>optional fixed64 fixed64 = 9;</code>
       */
      public Builder setFixed64(long value) {
        bitField0_ |= 0x00000080;
        fixed64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 fixed64 = 9;</code>
       */
      public Builder clearFixed64() {
        bitField0_ = (bitField0_ & ~0x00000080);
        fixed64_ = 0L;
        onChanged();
        return this;
      }

      private long sfixed64_ ;
      /**
       * <code>optional sfixed64 sfixed64 = 10;</code>
       */
      public boolean hasSfixed64() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sfixed64 sfixed64 = 10;</code>
       */
      public long getSfixed64() {
        return sfixed64_;
      }
      /**
       * <code>optional sfixed64 sfixed64 = 10;</code>
       */
      public Builder setSfixed64(long value) {
        bitField0_ |= 0x00000100;
        sfixed64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed64 sfixed64 = 10;</code>
       */
      public Builder clearSfixed64() {
        bitField0_ = (bitField0_ & ~0x00000100);
        sfixed64_ = 0L;
        onChanged();
        return this;
      }

      private double double_ ;
      /**
       * <code>optional double double = 11;</code>
       */
      public boolean hasDouble() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double double = 11;</code>
       */
      public double getDouble() {
        return double_;
      }
      /**
       * <code>optional double double = 11;</code>
       */
      public Builder setDouble(double value) {
        bitField0_ |= 0x00000200;
        double_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double double = 11;</code>
       */
      public Builder clearDouble() {
        bitField0_ = (bitField0_ & ~0x00000200);
        double_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object string_ = "";
      /**
       * <code>optional string string = 12;</code>
       */
      public boolean hasString() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional string string = 12;</code>
       */
      public java.lang.String getString() {
        java.lang.Object ref = string_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            string_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string string = 12;</code>
       */
      public com.google.protobuf.ByteString
          getStringBytes() {
        java.lang.Object ref = string_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          string_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string string = 12;</code>
       */
      public Builder setString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        string_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string string = 12;</code>
       */
      public Builder clearString() {
        bitField0_ = (bitField0_ & ~0x00000400);
        string_ = getDefaultInstance().getString();
        onChanged();
        return this;
      }
      /**
       * <code>optional string string = 12;</code>
       */
      public Builder setStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        string_ = value;
        onChanged();
        return this;
      }

      private int fixed32_ ;
      /**
       * <code>optional fixed32 fixed32 = 14;</code>
       */
      public boolean hasFixed32() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional fixed32 fixed32 = 14;</code>
       */
      public int getFixed32() {
        return fixed32_;
      }
      /**
       * <code>optional fixed32 fixed32 = 14;</code>
       */
      public Builder setFixed32(int value) {
        bitField0_ |= 0x00000800;
        fixed32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 fixed32 = 14;</code>
       */
      public Builder clearFixed32() {
        bitField0_ = (bitField0_ & ~0x00000800);
        fixed32_ = 0;
        onChanged();
        return this;
      }

      private int sfixed32_ ;
      /**
       * <code>optional sfixed32 sfixed32 = 15;</code>
       */
      public boolean hasSfixed32() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional sfixed32 sfixed32 = 15;</code>
       */
      public int getSfixed32() {
        return sfixed32_;
      }
      /**
       * <code>optional sfixed32 sfixed32 = 15;</code>
       */
      public Builder setSfixed32(int value) {
        bitField0_ |= 0x00001000;
        sfixed32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed32 sfixed32 = 15;</code>
       */
      public Builder clearSfixed32() {
        bitField0_ = (bitField0_ & ~0x00001000);
        sfixed32_ = 0;
        onChanged();
        return this;
      }

      private float float_ ;
      /**
       * <code>optional float float = 16;</code>
       */
      public boolean hasFloat() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float float = 16;</code>
       */
      public float getFloat() {
        return float_;
      }
      /**
       * <code>optional float float = 16;</code>
       */
      public Builder setFloat(float value) {
        bitField0_ |= 0x00002000;
        float_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float float = 16;</code>
       */
      public Builder clearFloat() {
        bitField0_ = (bitField0_ & ~0x00002000);
        float_ = 0F;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> baseMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetBaseMap() {
        if (baseMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              BaseMapDefaultEntryHolder.defaultEntry);
        }
        return baseMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableBaseMap() {
        onChanged();;
        if (baseMap_ == null) {
          baseMap_ = com.google.protobuf.MapField.newMapField(
              BaseMapDefaultEntryHolder.defaultEntry);
        }
        if (!baseMap_.isMutable()) {
          baseMap_ = baseMap_.copy();
        }
        return baseMap_;
      }

      public int getBaseMapCount() {
        return internalGetBaseMap().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; baseMap = 17;</code>
       */

      public boolean containsBaseMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetBaseMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getBaseMapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getBaseMap() {
        return getBaseMapMap();
      }
      /**
       * <code>map&lt;string, string&gt; baseMap = 17;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getBaseMapMap() {
        return internalGetBaseMap().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; baseMap = 17;</code>
       */

      public java.lang.String getBaseMapOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetBaseMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; baseMap = 17;</code>
       */

      public java.lang.String getBaseMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetBaseMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearBaseMap() {
        internalGetMutableBaseMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; baseMap = 17;</code>
       */

      public Builder removeBaseMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableBaseMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableBaseMap() {
        return internalGetMutableBaseMap().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; baseMap = 17;</code>
       */
      public Builder putBaseMap(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableBaseMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; baseMap = 17;</code>
       */

      public Builder putAllBaseMap(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableBaseMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.ckm.util.pb.PBTest.XMessage xMessage_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.ckm.util.pb.PBTest.XMessage, com.ckm.util.pb.PBTest.XMessage.Builder, com.ckm.util.pb.PBTest.XMessageOrBuilder> xMessageBuilder_;
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public boolean hasXMessage() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public com.ckm.util.pb.PBTest.XMessage getXMessage() {
        if (xMessageBuilder_ == null) {
          return xMessage_ == null ? com.ckm.util.pb.PBTest.XMessage.getDefaultInstance() : xMessage_;
        } else {
          return xMessageBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public Builder setXMessage(com.ckm.util.pb.PBTest.XMessage value) {
        if (xMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          xMessage_ = value;
          onChanged();
        } else {
          xMessageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public Builder setXMessage(
          com.ckm.util.pb.PBTest.XMessage.Builder builderForValue) {
        if (xMessageBuilder_ == null) {
          xMessage_ = builderForValue.build();
          onChanged();
        } else {
          xMessageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public Builder mergeXMessage(com.ckm.util.pb.PBTest.XMessage value) {
        if (xMessageBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              xMessage_ != null &&
              xMessage_ != com.ckm.util.pb.PBTest.XMessage.getDefaultInstance()) {
            xMessage_ =
              com.ckm.util.pb.PBTest.XMessage.newBuilder(xMessage_).mergeFrom(value).buildPartial();
          } else {
            xMessage_ = value;
          }
          onChanged();
        } else {
          xMessageBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public Builder clearXMessage() {
        if (xMessageBuilder_ == null) {
          xMessage_ = null;
          onChanged();
        } else {
          xMessageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public com.ckm.util.pb.PBTest.XMessage.Builder getXMessageBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getXMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      public com.ckm.util.pb.PBTest.XMessageOrBuilder getXMessageOrBuilder() {
        if (xMessageBuilder_ != null) {
          return xMessageBuilder_.getMessageOrBuilder();
        } else {
          return xMessage_ == null ?
              com.ckm.util.pb.PBTest.XMessage.getDefaultInstance() : xMessage_;
        }
      }
      /**
       * <code>optional .tutorial.XMessage x_message = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.ckm.util.pb.PBTest.XMessage, com.ckm.util.pb.PBTest.XMessage.Builder, com.ckm.util.pb.PBTest.XMessageOrBuilder> 
          getXMessageFieldBuilder() {
        if (xMessageBuilder_ == null) {
          xMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.ckm.util.pb.PBTest.XMessage, com.ckm.util.pb.PBTest.XMessage.Builder, com.ckm.util.pb.PBTest.XMessageOrBuilder>(
                  getXMessage(),
                  getParentForChildren(),
                  isClean());
          xMessage_ = null;
        }
        return xMessageBuilder_;
      }

      private int type_ = 0;
      /**
       * <code>optional .tutorial.EnumType type = 19;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .tutorial.EnumType type = 19;</code>
       */
      public com.ckm.util.pb.PBTest.EnumType getType() {
        @SuppressWarnings("deprecation")
        com.ckm.util.pb.PBTest.EnumType result = com.ckm.util.pb.PBTest.EnumType.valueOf(type_);
        return result == null ? com.ckm.util.pb.PBTest.EnumType.MOBILE : result;
      }
      /**
       * <code>optional .tutorial.EnumType type = 19;</code>
       */
      public Builder setType(com.ckm.util.pb.PBTest.EnumType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00010000;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .tutorial.EnumType type = 19;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00010000);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.ckm.util.pb.PBTest.XMessage> xMessageList_ =
        java.util.Collections.emptyList();
      private void ensureXMessageListIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          xMessageList_ = new java.util.ArrayList<com.ckm.util.pb.PBTest.XMessage>(xMessageList_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.ckm.util.pb.PBTest.XMessage, com.ckm.util.pb.PBTest.XMessage.Builder, com.ckm.util.pb.PBTest.XMessageOrBuilder> xMessageListBuilder_;

      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public java.util.List<com.ckm.util.pb.PBTest.XMessage> getXMessageListList() {
        if (xMessageListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(xMessageList_);
        } else {
          return xMessageListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public int getXMessageListCount() {
        if (xMessageListBuilder_ == null) {
          return xMessageList_.size();
        } else {
          return xMessageListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public com.ckm.util.pb.PBTest.XMessage getXMessageList(int index) {
        if (xMessageListBuilder_ == null) {
          return xMessageList_.get(index);
        } else {
          return xMessageListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder setXMessageList(
          int index, com.ckm.util.pb.PBTest.XMessage value) {
        if (xMessageListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureXMessageListIsMutable();
          xMessageList_.set(index, value);
          onChanged();
        } else {
          xMessageListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder setXMessageList(
          int index, com.ckm.util.pb.PBTest.XMessage.Builder builderForValue) {
        if (xMessageListBuilder_ == null) {
          ensureXMessageListIsMutable();
          xMessageList_.set(index, builderForValue.build());
          onChanged();
        } else {
          xMessageListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder addXMessageList(com.ckm.util.pb.PBTest.XMessage value) {
        if (xMessageListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureXMessageListIsMutable();
          xMessageList_.add(value);
          onChanged();
        } else {
          xMessageListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder addXMessageList(
          int index, com.ckm.util.pb.PBTest.XMessage value) {
        if (xMessageListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureXMessageListIsMutable();
          xMessageList_.add(index, value);
          onChanged();
        } else {
          xMessageListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder addXMessageList(
          com.ckm.util.pb.PBTest.XMessage.Builder builderForValue) {
        if (xMessageListBuilder_ == null) {
          ensureXMessageListIsMutable();
          xMessageList_.add(builderForValue.build());
          onChanged();
        } else {
          xMessageListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder addXMessageList(
          int index, com.ckm.util.pb.PBTest.XMessage.Builder builderForValue) {
        if (xMessageListBuilder_ == null) {
          ensureXMessageListIsMutable();
          xMessageList_.add(index, builderForValue.build());
          onChanged();
        } else {
          xMessageListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder addAllXMessageList(
          java.lang.Iterable<? extends com.ckm.util.pb.PBTest.XMessage> values) {
        if (xMessageListBuilder_ == null) {
          ensureXMessageListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, xMessageList_);
          onChanged();
        } else {
          xMessageListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder clearXMessageList() {
        if (xMessageListBuilder_ == null) {
          xMessageList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          xMessageListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public Builder removeXMessageList(int index) {
        if (xMessageListBuilder_ == null) {
          ensureXMessageListIsMutable();
          xMessageList_.remove(index);
          onChanged();
        } else {
          xMessageListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public com.ckm.util.pb.PBTest.XMessage.Builder getXMessageListBuilder(
          int index) {
        return getXMessageListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public com.ckm.util.pb.PBTest.XMessageOrBuilder getXMessageListOrBuilder(
          int index) {
        if (xMessageListBuilder_ == null) {
          return xMessageList_.get(index);  } else {
          return xMessageListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public java.util.List<? extends com.ckm.util.pb.PBTest.XMessageOrBuilder> 
           getXMessageListOrBuilderList() {
        if (xMessageListBuilder_ != null) {
          return xMessageListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(xMessageList_);
        }
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public com.ckm.util.pb.PBTest.XMessage.Builder addXMessageListBuilder() {
        return getXMessageListFieldBuilder().addBuilder(
            com.ckm.util.pb.PBTest.XMessage.getDefaultInstance());
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public com.ckm.util.pb.PBTest.XMessage.Builder addXMessageListBuilder(
          int index) {
        return getXMessageListFieldBuilder().addBuilder(
            index, com.ckm.util.pb.PBTest.XMessage.getDefaultInstance());
      }
      /**
       * <code>repeated .tutorial.XMessage x_message_list = 20;</code>
       */
      public java.util.List<com.ckm.util.pb.PBTest.XMessage.Builder> 
           getXMessageListBuilderList() {
        return getXMessageListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.ckm.util.pb.PBTest.XMessage, com.ckm.util.pb.PBTest.XMessage.Builder, com.ckm.util.pb.PBTest.XMessageOrBuilder> 
          getXMessageListFieldBuilder() {
        if (xMessageListBuilder_ == null) {
          xMessageListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.ckm.util.pb.PBTest.XMessage, com.ckm.util.pb.PBTest.XMessage.Builder, com.ckm.util.pb.PBTest.XMessageOrBuilder>(
                  xMessageList_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          xMessageList_ = null;
        }
        return xMessageListBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, com.ckm.util.pb.PBTest.XMessage> xMessageMap_;
      private com.google.protobuf.MapField<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
      internalGetXMessageMap() {
        if (xMessageMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              XMessageMapDefaultEntryHolder.defaultEntry);
        }
        return xMessageMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
      internalGetMutableXMessageMap() {
        onChanged();;
        if (xMessageMap_ == null) {
          xMessageMap_ = com.google.protobuf.MapField.newMapField(
              XMessageMapDefaultEntryHolder.defaultEntry);
        }
        if (!xMessageMap_.isMutable()) {
          xMessageMap_ = xMessageMap_.copy();
        }
        return xMessageMap_;
      }

      public int getXMessageMapCount() {
        return internalGetXMessageMap().getMap().size();
      }
      /**
       * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
       */

      public boolean containsXMessageMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetXMessageMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getXMessageMapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> getXMessageMap() {
        return getXMessageMapMap();
      }
      /**
       * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
       */

      public java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> getXMessageMapMap() {
        return internalGetXMessageMap().getMap();
      }
      /**
       * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
       */

      public com.ckm.util.pb.PBTest.XMessage getXMessageMapOrDefault(
          java.lang.String key,
          com.ckm.util.pb.PBTest.XMessage defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> map =
            internalGetXMessageMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
       */

      public com.ckm.util.pb.PBTest.XMessage getXMessageMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> map =
            internalGetXMessageMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearXMessageMap() {
        internalGetMutableXMessageMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
       */

      public Builder removeXMessageMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableXMessageMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage>
      getMutableXMessageMap() {
        return internalGetMutableXMessageMap().getMutableMap();
      }
      /**
       * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
       */
      public Builder putXMessageMap(
          java.lang.String key,
          com.ckm.util.pb.PBTest.XMessage value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableXMessageMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, .tutorial.XMessage&gt; x_message_map = 21;</code>
       */

      public Builder putAllXMessageMap(
          java.util.Map<java.lang.String, com.ckm.util.pb.PBTest.XMessage> values) {
        internalGetMutableXMessageMap().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tutorial.TestAllType)
    }

    // @@protoc_insertion_point(class_scope:tutorial.TestAllType)
    private static final com.ckm.util.pb.PBTest.TestAllType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.ckm.util.pb.PBTest.TestAllType();
    }

    public static com.ckm.util.pb.PBTest.TestAllType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TestAllType>
        PARSER = new com.google.protobuf.AbstractParser<TestAllType>() {
      @java.lang.Override
      public TestAllType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TestAllType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TestAllType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TestAllType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.ckm.util.pb.PBTest.TestAllType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tutorial.XMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>optional string id = 1;</code>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional int32 age = 3;</code>
     */
    boolean hasAge();
    /**
     * <code>optional int32 age = 3;</code>
     */
    int getAge();
  }
  /**
   * Protobuf type {@code tutorial.XMessage}
   */
  public  static final class XMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tutorial.XMessage)
      XMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XMessage.newBuilder() to construct.
    private XMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XMessage() {
      id_ = "";
      name_ = "";
      age_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private XMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              id_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              age_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_XMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_XMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ckm.util.pb.PBTest.XMessage.class, com.ckm.util.pb.PBTest.XMessage.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <code>optional string id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string id = 1;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AGE_FIELD_NUMBER = 3;
    private int age_;
    /**
     * <code>optional int32 age = 3;</code>
     */
    public boolean hasAge() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 age = 3;</code>
     */
    public int getAge() {
      return age_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, age_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, age_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.ckm.util.pb.PBTest.XMessage)) {
        return super.equals(obj);
      }
      com.ckm.util.pb.PBTest.XMessage other = (com.ckm.util.pb.PBTest.XMessage) obj;

      boolean result = true;
      result = result && (hasId() == other.hasId());
      if (hasId()) {
        result = result && getId()
            .equals(other.getId());
      }
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasAge() == other.hasAge());
      if (hasAge()) {
        result = result && (getAge()
            == other.getAge());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasAge()) {
        hash = (37 * hash) + AGE_FIELD_NUMBER;
        hash = (53 * hash) + getAge();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.XMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ckm.util.pb.PBTest.XMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tutorial.XMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tutorial.XMessage)
        com.ckm.util.pb.PBTest.XMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_XMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_XMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ckm.util.pb.PBTest.XMessage.class, com.ckm.util.pb.PBTest.XMessage.Builder.class);
      }

      // Construct using com.ckm.util.pb.PBTest.XMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        age_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_XMessage_descriptor;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.XMessage getDefaultInstanceForType() {
        return com.ckm.util.pb.PBTest.XMessage.getDefaultInstance();
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.XMessage build() {
        com.ckm.util.pb.PBTest.XMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.XMessage buildPartial() {
        com.ckm.util.pb.PBTest.XMessage result = new com.ckm.util.pb.PBTest.XMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.age_ = age_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ckm.util.pb.PBTest.XMessage) {
          return mergeFrom((com.ckm.util.pb.PBTest.XMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ckm.util.pb.PBTest.XMessage other) {
        if (other == com.ckm.util.pb.PBTest.XMessage.getDefaultInstance()) return this;
        if (other.hasId()) {
          bitField0_ |= 0x00000001;
          id_ = other.id_;
          onChanged();
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasAge()) {
          setAge(other.getAge());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ckm.util.pb.PBTest.XMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ckm.util.pb.PBTest.XMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      private int age_ ;
      /**
       * <code>optional int32 age = 3;</code>
       */
      public boolean hasAge() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 age = 3;</code>
       */
      public int getAge() {
        return age_;
      }
      /**
       * <code>optional int32 age = 3;</code>
       */
      public Builder setAge(int value) {
        bitField0_ |= 0x00000004;
        age_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 age = 3;</code>
       */
      public Builder clearAge() {
        bitField0_ = (bitField0_ & ~0x00000004);
        age_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tutorial.XMessage)
    }

    // @@protoc_insertion_point(class_scope:tutorial.XMessage)
    private static final com.ckm.util.pb.PBTest.XMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.ckm.util.pb.PBTest.XMessage();
    }

    public static com.ckm.util.pb.PBTest.XMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<XMessage>
        PARSER = new com.google.protobuf.AbstractParser<XMessage>() {
      @java.lang.Override
      public XMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new XMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<XMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.ckm.util.pb.PBTest.XMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ListTestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tutorial.ListTest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int32 int32 = 1;</code>
     */
    java.util.List<java.lang.Integer> getInt32List();
    /**
     * <code>repeated int32 int32 = 1;</code>
     */
    int getInt32Count();
    /**
     * <code>repeated int32 int32 = 1;</code>
     */
    int getInt32(int index);

    /**
     * <code>repeated int64 int64 = 2;</code>
     */
    java.util.List<java.lang.Long> getInt64List();
    /**
     * <code>repeated int64 int64 = 2;</code>
     */
    int getInt64Count();
    /**
     * <code>repeated int64 int64 = 2;</code>
     */
    long getInt64(int index);

    /**
     * <code>repeated uint32 uint32 = 3;</code>
     */
    java.util.List<java.lang.Integer> getUint32List();
    /**
     * <code>repeated uint32 uint32 = 3;</code>
     */
    int getUint32Count();
    /**
     * <code>repeated uint32 uint32 = 3;</code>
     */
    int getUint32(int index);

    /**
     * <code>repeated uint64 uint64 = 4;</code>
     */
    java.util.List<java.lang.Long> getUint64List();
    /**
     * <code>repeated uint64 uint64 = 4;</code>
     */
    int getUint64Count();
    /**
     * <code>repeated uint64 uint64 = 4;</code>
     */
    long getUint64(int index);

    /**
     * <code>repeated sint32 sint32 = 5;</code>
     */
    java.util.List<java.lang.Integer> getSint32List();
    /**
     * <code>repeated sint32 sint32 = 5;</code>
     */
    int getSint32Count();
    /**
     * <code>repeated sint32 sint32 = 5;</code>
     */
    int getSint32(int index);

    /**
     * <code>repeated sint64 sint64 = 6;</code>
     */
    java.util.List<java.lang.Long> getSint64List();
    /**
     * <code>repeated sint64 sint64 = 6;</code>
     */
    int getSint64Count();
    /**
     * <code>repeated sint64 sint64 = 6;</code>
     */
    long getSint64(int index);

    /**
     * <code>repeated bool bool = 7;</code>
     */
    java.util.List<java.lang.Boolean> getBoolList();
    /**
     * <code>repeated bool bool = 7;</code>
     */
    int getBoolCount();
    /**
     * <code>repeated bool bool = 7;</code>
     */
    boolean getBool(int index);

    /**
     * <code>repeated fixed64 fixed64 = 9;</code>
     */
    java.util.List<java.lang.Long> getFixed64List();
    /**
     * <code>repeated fixed64 fixed64 = 9;</code>
     */
    int getFixed64Count();
    /**
     * <code>repeated fixed64 fixed64 = 9;</code>
     */
    long getFixed64(int index);

    /**
     * <code>repeated sfixed64 sfixed64 = 10;</code>
     */
    java.util.List<java.lang.Long> getSfixed64List();
    /**
     * <code>repeated sfixed64 sfixed64 = 10;</code>
     */
    int getSfixed64Count();
    /**
     * <code>repeated sfixed64 sfixed64 = 10;</code>
     */
    long getSfixed64(int index);

    /**
     * <code>repeated double double = 11;</code>
     */
    java.util.List<java.lang.Double> getDoubleList();
    /**
     * <code>repeated double double = 11;</code>
     */
    int getDoubleCount();
    /**
     * <code>repeated double double = 11;</code>
     */
    double getDouble(int index);

    /**
     * <code>repeated string string = 12;</code>
     */
    java.util.List<java.lang.String>
        getStringList();
    /**
     * <code>repeated string string = 12;</code>
     */
    int getStringCount();
    /**
     * <code>repeated string string = 12;</code>
     */
    java.lang.String getString(int index);
    /**
     * <code>repeated string string = 12;</code>
     */
    com.google.protobuf.ByteString
        getStringBytes(int index);

    /**
     * <code>repeated fixed32 fixed32 = 14;</code>
     */
    java.util.List<java.lang.Integer> getFixed32List();
    /**
     * <code>repeated fixed32 fixed32 = 14;</code>
     */
    int getFixed32Count();
    /**
     * <code>repeated fixed32 fixed32 = 14;</code>
     */
    int getFixed32(int index);

    /**
     * <code>repeated sfixed32 sfixed32 = 15;</code>
     */
    java.util.List<java.lang.Integer> getSfixed32List();
    /**
     * <code>repeated sfixed32 sfixed32 = 15;</code>
     */
    int getSfixed32Count();
    /**
     * <code>repeated sfixed32 sfixed32 = 15;</code>
     */
    int getSfixed32(int index);

    /**
     * <code>repeated float float = 16;</code>
     */
    java.util.List<java.lang.Float> getFloatList();
    /**
     * <code>repeated float float = 16;</code>
     */
    int getFloatCount();
    /**
     * <code>repeated float float = 16;</code>
     */
    float getFloat(int index);
  }
  /**
   * Protobuf type {@code tutorial.ListTest}
   */
  public  static final class ListTest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tutorial.ListTest)
      ListTestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ListTest.newBuilder() to construct.
    private ListTest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ListTest() {
      int32_ = java.util.Collections.emptyList();
      int64_ = java.util.Collections.emptyList();
      uint32_ = java.util.Collections.emptyList();
      uint64_ = java.util.Collections.emptyList();
      sint32_ = java.util.Collections.emptyList();
      sint64_ = java.util.Collections.emptyList();
      bool_ = java.util.Collections.emptyList();
      fixed64_ = java.util.Collections.emptyList();
      sfixed64_ = java.util.Collections.emptyList();
      double_ = java.util.Collections.emptyList();
      string_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      fixed32_ = java.util.Collections.emptyList();
      sfixed32_ = java.util.Collections.emptyList();
      float_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ListTest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                int32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              int32_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                int32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                int32_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                int64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              int64_.add(input.readInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                int64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                int64_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                uint32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              uint32_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                uint32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                uint32_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                uint64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              uint64_.add(input.readUInt64());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                uint64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                uint64_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                sint32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              sint32_.add(input.readSInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                sint32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                sint32_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                sint64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000020;
              }
              sint64_.add(input.readSInt64());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                sint64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                sint64_.add(input.readSInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                bool_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000040;
              }
              bool_.add(input.readBool());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                bool_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                bool_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 73: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                fixed64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              fixed64_.add(input.readFixed64());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                fixed64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                fixed64_.add(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 81: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                sfixed64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000100;
              }
              sfixed64_.add(input.readSFixed64());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                sfixed64_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                sfixed64_.add(input.readSFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 89: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                double_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000200;
              }
              double_.add(input.readDouble());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                double_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                double_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                string_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000400;
              }
              string_.add(bs);
              break;
            }
            case 117: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                fixed32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              fixed32_.add(input.readFixed32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                fixed32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                fixed32_.add(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 125: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                sfixed32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              sfixed32_.add(input.readSFixed32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                sfixed32_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                sfixed32_.add(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 133: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                float_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00002000;
              }
              float_.add(input.readFloat());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                float_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                float_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          int32_ = java.util.Collections.unmodifiableList(int32_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          int64_ = java.util.Collections.unmodifiableList(int64_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          uint32_ = java.util.Collections.unmodifiableList(uint32_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          uint64_ = java.util.Collections.unmodifiableList(uint64_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          sint32_ = java.util.Collections.unmodifiableList(sint32_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          sint64_ = java.util.Collections.unmodifiableList(sint64_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          bool_ = java.util.Collections.unmodifiableList(bool_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          fixed64_ = java.util.Collections.unmodifiableList(fixed64_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          sfixed64_ = java.util.Collections.unmodifiableList(sfixed64_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          double_ = java.util.Collections.unmodifiableList(double_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          string_ = string_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          fixed32_ = java.util.Collections.unmodifiableList(fixed32_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          sfixed32_ = java.util.Collections.unmodifiableList(sfixed32_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          float_ = java.util.Collections.unmodifiableList(float_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_ListTest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_ListTest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ckm.util.pb.PBTest.ListTest.class, com.ckm.util.pb.PBTest.ListTest.Builder.class);
    }

    public static final int INT32_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> int32_;
    /**
     * <code>repeated int32 int32 = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getInt32List() {
      return int32_;
    }
    /**
     * <code>repeated int32 int32 = 1;</code>
     */
    public int getInt32Count() {
      return int32_.size();
    }
    /**
     * <code>repeated int32 int32 = 1;</code>
     */
    public int getInt32(int index) {
      return int32_.get(index);
    }

    public static final int INT64_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> int64_;
    /**
     * <code>repeated int64 int64 = 2;</code>
     */
    public java.util.List<java.lang.Long>
        getInt64List() {
      return int64_;
    }
    /**
     * <code>repeated int64 int64 = 2;</code>
     */
    public int getInt64Count() {
      return int64_.size();
    }
    /**
     * <code>repeated int64 int64 = 2;</code>
     */
    public long getInt64(int index) {
      return int64_.get(index);
    }

    public static final int UINT32_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> uint32_;
    /**
     * <code>repeated uint32 uint32 = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getUint32List() {
      return uint32_;
    }
    /**
     * <code>repeated uint32 uint32 = 3;</code>
     */
    public int getUint32Count() {
      return uint32_.size();
    }
    /**
     * <code>repeated uint32 uint32 = 3;</code>
     */
    public int getUint32(int index) {
      return uint32_.get(index);
    }

    public static final int UINT64_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Long> uint64_;
    /**
     * <code>repeated uint64 uint64 = 4;</code>
     */
    public java.util.List<java.lang.Long>
        getUint64List() {
      return uint64_;
    }
    /**
     * <code>repeated uint64 uint64 = 4;</code>
     */
    public int getUint64Count() {
      return uint64_.size();
    }
    /**
     * <code>repeated uint64 uint64 = 4;</code>
     */
    public long getUint64(int index) {
      return uint64_.get(index);
    }

    public static final int SINT32_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> sint32_;
    /**
     * <code>repeated sint32 sint32 = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getSint32List() {
      return sint32_;
    }
    /**
     * <code>repeated sint32 sint32 = 5;</code>
     */
    public int getSint32Count() {
      return sint32_.size();
    }
    /**
     * <code>repeated sint32 sint32 = 5;</code>
     */
    public int getSint32(int index) {
      return sint32_.get(index);
    }

    public static final int SINT64_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Long> sint64_;
    /**
     * <code>repeated sint64 sint64 = 6;</code>
     */
    public java.util.List<java.lang.Long>
        getSint64List() {
      return sint64_;
    }
    /**
     * <code>repeated sint64 sint64 = 6;</code>
     */
    public int getSint64Count() {
      return sint64_.size();
    }
    /**
     * <code>repeated sint64 sint64 = 6;</code>
     */
    public long getSint64(int index) {
      return sint64_.get(index);
    }

    public static final int BOOL_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Boolean> bool_;
    /**
     * <code>repeated bool bool = 7;</code>
     */
    public java.util.List<java.lang.Boolean>
        getBoolList() {
      return bool_;
    }
    /**
     * <code>repeated bool bool = 7;</code>
     */
    public int getBoolCount() {
      return bool_.size();
    }
    /**
     * <code>repeated bool bool = 7;</code>
     */
    public boolean getBool(int index) {
      return bool_.get(index);
    }

    public static final int FIXED64_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Long> fixed64_;
    /**
     * <code>repeated fixed64 fixed64 = 9;</code>
     */
    public java.util.List<java.lang.Long>
        getFixed64List() {
      return fixed64_;
    }
    /**
     * <code>repeated fixed64 fixed64 = 9;</code>
     */
    public int getFixed64Count() {
      return fixed64_.size();
    }
    /**
     * <code>repeated fixed64 fixed64 = 9;</code>
     */
    public long getFixed64(int index) {
      return fixed64_.get(index);
    }

    public static final int SFIXED64_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Long> sfixed64_;
    /**
     * <code>repeated sfixed64 sfixed64 = 10;</code>
     */
    public java.util.List<java.lang.Long>
        getSfixed64List() {
      return sfixed64_;
    }
    /**
     * <code>repeated sfixed64 sfixed64 = 10;</code>
     */
    public int getSfixed64Count() {
      return sfixed64_.size();
    }
    /**
     * <code>repeated sfixed64 sfixed64 = 10;</code>
     */
    public long getSfixed64(int index) {
      return sfixed64_.get(index);
    }

    public static final int DOUBLE_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Double> double_;
    /**
     * <code>repeated double double = 11;</code>
     */
    public java.util.List<java.lang.Double>
        getDoubleList() {
      return double_;
    }
    /**
     * <code>repeated double double = 11;</code>
     */
    public int getDoubleCount() {
      return double_.size();
    }
    /**
     * <code>repeated double double = 11;</code>
     */
    public double getDouble(int index) {
      return double_.get(index);
    }

    public static final int STRING_FIELD_NUMBER = 12;
    private com.google.protobuf.LazyStringList string_;
    /**
     * <code>repeated string string = 12;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getStringList() {
      return string_;
    }
    /**
     * <code>repeated string string = 12;</code>
     */
    public int getStringCount() {
      return string_.size();
    }
    /**
     * <code>repeated string string = 12;</code>
     */
    public java.lang.String getString(int index) {
      return string_.get(index);
    }
    /**
     * <code>repeated string string = 12;</code>
     */
    public com.google.protobuf.ByteString
        getStringBytes(int index) {
      return string_.getByteString(index);
    }

    public static final int FIXED32_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> fixed32_;
    /**
     * <code>repeated fixed32 fixed32 = 14;</code>
     */
    public java.util.List<java.lang.Integer>
        getFixed32List() {
      return fixed32_;
    }
    /**
     * <code>repeated fixed32 fixed32 = 14;</code>
     */
    public int getFixed32Count() {
      return fixed32_.size();
    }
    /**
     * <code>repeated fixed32 fixed32 = 14;</code>
     */
    public int getFixed32(int index) {
      return fixed32_.get(index);
    }

    public static final int SFIXED32_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> sfixed32_;
    /**
     * <code>repeated sfixed32 sfixed32 = 15;</code>
     */
    public java.util.List<java.lang.Integer>
        getSfixed32List() {
      return sfixed32_;
    }
    /**
     * <code>repeated sfixed32 sfixed32 = 15;</code>
     */
    public int getSfixed32Count() {
      return sfixed32_.size();
    }
    /**
     * <code>repeated sfixed32 sfixed32 = 15;</code>
     */
    public int getSfixed32(int index) {
      return sfixed32_.get(index);
    }

    public static final int FLOAT_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Float> float_;
    /**
     * <code>repeated float float = 16;</code>
     */
    public java.util.List<java.lang.Float>
        getFloatList() {
      return float_;
    }
    /**
     * <code>repeated float float = 16;</code>
     */
    public int getFloatCount() {
      return float_.size();
    }
    /**
     * <code>repeated float float = 16;</code>
     */
    public float getFloat(int index) {
      return float_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < int32_.size(); i++) {
        output.writeInt32(1, int32_.get(i));
      }
      for (int i = 0; i < int64_.size(); i++) {
        output.writeInt64(2, int64_.get(i));
      }
      for (int i = 0; i < uint32_.size(); i++) {
        output.writeUInt32(3, uint32_.get(i));
      }
      for (int i = 0; i < uint64_.size(); i++) {
        output.writeUInt64(4, uint64_.get(i));
      }
      for (int i = 0; i < sint32_.size(); i++) {
        output.writeSInt32(5, sint32_.get(i));
      }
      for (int i = 0; i < sint64_.size(); i++) {
        output.writeSInt64(6, sint64_.get(i));
      }
      for (int i = 0; i < bool_.size(); i++) {
        output.writeBool(7, bool_.get(i));
      }
      for (int i = 0; i < fixed64_.size(); i++) {
        output.writeFixed64(9, fixed64_.get(i));
      }
      for (int i = 0; i < sfixed64_.size(); i++) {
        output.writeSFixed64(10, sfixed64_.get(i));
      }
      for (int i = 0; i < double_.size(); i++) {
        output.writeDouble(11, double_.get(i));
      }
      for (int i = 0; i < string_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, string_.getRaw(i));
      }
      for (int i = 0; i < fixed32_.size(); i++) {
        output.writeFixed32(14, fixed32_.get(i));
      }
      for (int i = 0; i < sfixed32_.size(); i++) {
        output.writeSFixed32(15, sfixed32_.get(i));
      }
      for (int i = 0; i < float_.size(); i++) {
        output.writeFloat(16, float_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < int32_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(int32_.get(i));
        }
        size += dataSize;
        size += 1 * getInt32List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < int64_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(int64_.get(i));
        }
        size += dataSize;
        size += 1 * getInt64List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < uint32_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(uint32_.get(i));
        }
        size += dataSize;
        size += 1 * getUint32List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < uint64_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(uint64_.get(i));
        }
        size += dataSize;
        size += 1 * getUint64List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sint32_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(sint32_.get(i));
        }
        size += dataSize;
        size += 1 * getSint32List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sint64_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt64SizeNoTag(sint64_.get(i));
        }
        size += dataSize;
        size += 1 * getSint64List().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getBoolList().size();
        size += dataSize;
        size += 1 * getBoolList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getFixed64List().size();
        size += dataSize;
        size += 1 * getFixed64List().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSfixed64List().size();
        size += dataSize;
        size += 1 * getSfixed64List().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleList().size();
        size += dataSize;
        size += 1 * getDoubleList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < string_.size(); i++) {
          dataSize += computeStringSizeNoTag(string_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFixed32List().size();
        size += dataSize;
        size += 1 * getFixed32List().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSfixed32List().size();
        size += dataSize;
        size += 1 * getSfixed32List().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatList().size();
        size += dataSize;
        size += 2 * getFloatList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.ckm.util.pb.PBTest.ListTest)) {
        return super.equals(obj);
      }
      com.ckm.util.pb.PBTest.ListTest other = (com.ckm.util.pb.PBTest.ListTest) obj;

      boolean result = true;
      result = result && getInt32List()
          .equals(other.getInt32List());
      result = result && getInt64List()
          .equals(other.getInt64List());
      result = result && getUint32List()
          .equals(other.getUint32List());
      result = result && getUint64List()
          .equals(other.getUint64List());
      result = result && getSint32List()
          .equals(other.getSint32List());
      result = result && getSint64List()
          .equals(other.getSint64List());
      result = result && getBoolList()
          .equals(other.getBoolList());
      result = result && getFixed64List()
          .equals(other.getFixed64List());
      result = result && getSfixed64List()
          .equals(other.getSfixed64List());
      result = result && getDoubleList()
          .equals(other.getDoubleList());
      result = result && getStringList()
          .equals(other.getStringList());
      result = result && getFixed32List()
          .equals(other.getFixed32List());
      result = result && getSfixed32List()
          .equals(other.getSfixed32List());
      result = result && getFloatList()
          .equals(other.getFloatList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getInt32Count() > 0) {
        hash = (37 * hash) + INT32_FIELD_NUMBER;
        hash = (53 * hash) + getInt32List().hashCode();
      }
      if (getInt64Count() > 0) {
        hash = (37 * hash) + INT64_FIELD_NUMBER;
        hash = (53 * hash) + getInt64List().hashCode();
      }
      if (getUint32Count() > 0) {
        hash = (37 * hash) + UINT32_FIELD_NUMBER;
        hash = (53 * hash) + getUint32List().hashCode();
      }
      if (getUint64Count() > 0) {
        hash = (37 * hash) + UINT64_FIELD_NUMBER;
        hash = (53 * hash) + getUint64List().hashCode();
      }
      if (getSint32Count() > 0) {
        hash = (37 * hash) + SINT32_FIELD_NUMBER;
        hash = (53 * hash) + getSint32List().hashCode();
      }
      if (getSint64Count() > 0) {
        hash = (37 * hash) + SINT64_FIELD_NUMBER;
        hash = (53 * hash) + getSint64List().hashCode();
      }
      if (getBoolCount() > 0) {
        hash = (37 * hash) + BOOL_FIELD_NUMBER;
        hash = (53 * hash) + getBoolList().hashCode();
      }
      if (getFixed64Count() > 0) {
        hash = (37 * hash) + FIXED64_FIELD_NUMBER;
        hash = (53 * hash) + getFixed64List().hashCode();
      }
      if (getSfixed64Count() > 0) {
        hash = (37 * hash) + SFIXED64_FIELD_NUMBER;
        hash = (53 * hash) + getSfixed64List().hashCode();
      }
      if (getDoubleCount() > 0) {
        hash = (37 * hash) + DOUBLE_FIELD_NUMBER;
        hash = (53 * hash) + getDoubleList().hashCode();
      }
      if (getStringCount() > 0) {
        hash = (37 * hash) + STRING_FIELD_NUMBER;
        hash = (53 * hash) + getStringList().hashCode();
      }
      if (getFixed32Count() > 0) {
        hash = (37 * hash) + FIXED32_FIELD_NUMBER;
        hash = (53 * hash) + getFixed32List().hashCode();
      }
      if (getSfixed32Count() > 0) {
        hash = (37 * hash) + SFIXED32_FIELD_NUMBER;
        hash = (53 * hash) + getSfixed32List().hashCode();
      }
      if (getFloatCount() > 0) {
        hash = (37 * hash) + FLOAT_FIELD_NUMBER;
        hash = (53 * hash) + getFloatList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.ListTest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ckm.util.pb.PBTest.ListTest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tutorial.ListTest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tutorial.ListTest)
        com.ckm.util.pb.PBTest.ListTestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_ListTest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_ListTest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ckm.util.pb.PBTest.ListTest.class, com.ckm.util.pb.PBTest.ListTest.Builder.class);
      }

      // Construct using com.ckm.util.pb.PBTest.ListTest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        int32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        int64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        uint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        uint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        sint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        sint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        bool_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        fixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        sfixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        double_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        string_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000400);
        fixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        sfixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        float_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_ListTest_descriptor;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.ListTest getDefaultInstanceForType() {
        return com.ckm.util.pb.PBTest.ListTest.getDefaultInstance();
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.ListTest build() {
        com.ckm.util.pb.PBTest.ListTest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.ListTest buildPartial() {
        com.ckm.util.pb.PBTest.ListTest result = new com.ckm.util.pb.PBTest.ListTest(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          int32_ = java.util.Collections.unmodifiableList(int32_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.int32_ = int32_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          int64_ = java.util.Collections.unmodifiableList(int64_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.int64_ = int64_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          uint32_ = java.util.Collections.unmodifiableList(uint32_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.uint32_ = uint32_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          uint64_ = java.util.Collections.unmodifiableList(uint64_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.uint64_ = uint64_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          sint32_ = java.util.Collections.unmodifiableList(sint32_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.sint32_ = sint32_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          sint64_ = java.util.Collections.unmodifiableList(sint64_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.sint64_ = sint64_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          bool_ = java.util.Collections.unmodifiableList(bool_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.bool_ = bool_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          fixed64_ = java.util.Collections.unmodifiableList(fixed64_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.fixed64_ = fixed64_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          sfixed64_ = java.util.Collections.unmodifiableList(sfixed64_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.sfixed64_ = sfixed64_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          double_ = java.util.Collections.unmodifiableList(double_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.double_ = double_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          string_ = string_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.string_ = string_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          fixed32_ = java.util.Collections.unmodifiableList(fixed32_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.fixed32_ = fixed32_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          sfixed32_ = java.util.Collections.unmodifiableList(sfixed32_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.sfixed32_ = sfixed32_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          float_ = java.util.Collections.unmodifiableList(float_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.float_ = float_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ckm.util.pb.PBTest.ListTest) {
          return mergeFrom((com.ckm.util.pb.PBTest.ListTest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ckm.util.pb.PBTest.ListTest other) {
        if (other == com.ckm.util.pb.PBTest.ListTest.getDefaultInstance()) return this;
        if (!other.int32_.isEmpty()) {
          if (int32_.isEmpty()) {
            int32_ = other.int32_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInt32IsMutable();
            int32_.addAll(other.int32_);
          }
          onChanged();
        }
        if (!other.int64_.isEmpty()) {
          if (int64_.isEmpty()) {
            int64_ = other.int64_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureInt64IsMutable();
            int64_.addAll(other.int64_);
          }
          onChanged();
        }
        if (!other.uint32_.isEmpty()) {
          if (uint32_.isEmpty()) {
            uint32_ = other.uint32_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureUint32IsMutable();
            uint32_.addAll(other.uint32_);
          }
          onChanged();
        }
        if (!other.uint64_.isEmpty()) {
          if (uint64_.isEmpty()) {
            uint64_ = other.uint64_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureUint64IsMutable();
            uint64_.addAll(other.uint64_);
          }
          onChanged();
        }
        if (!other.sint32_.isEmpty()) {
          if (sint32_.isEmpty()) {
            sint32_ = other.sint32_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureSint32IsMutable();
            sint32_.addAll(other.sint32_);
          }
          onChanged();
        }
        if (!other.sint64_.isEmpty()) {
          if (sint64_.isEmpty()) {
            sint64_ = other.sint64_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSint64IsMutable();
            sint64_.addAll(other.sint64_);
          }
          onChanged();
        }
        if (!other.bool_.isEmpty()) {
          if (bool_.isEmpty()) {
            bool_ = other.bool_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureBoolIsMutable();
            bool_.addAll(other.bool_);
          }
          onChanged();
        }
        if (!other.fixed64_.isEmpty()) {
          if (fixed64_.isEmpty()) {
            fixed64_ = other.fixed64_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureFixed64IsMutable();
            fixed64_.addAll(other.fixed64_);
          }
          onChanged();
        }
        if (!other.sfixed64_.isEmpty()) {
          if (sfixed64_.isEmpty()) {
            sfixed64_ = other.sfixed64_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureSfixed64IsMutable();
            sfixed64_.addAll(other.sfixed64_);
          }
          onChanged();
        }
        if (!other.double_.isEmpty()) {
          if (double_.isEmpty()) {
            double_ = other.double_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureDoubleIsMutable();
            double_.addAll(other.double_);
          }
          onChanged();
        }
        if (!other.string_.isEmpty()) {
          if (string_.isEmpty()) {
            string_ = other.string_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureStringIsMutable();
            string_.addAll(other.string_);
          }
          onChanged();
        }
        if (!other.fixed32_.isEmpty()) {
          if (fixed32_.isEmpty()) {
            fixed32_ = other.fixed32_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureFixed32IsMutable();
            fixed32_.addAll(other.fixed32_);
          }
          onChanged();
        }
        if (!other.sfixed32_.isEmpty()) {
          if (sfixed32_.isEmpty()) {
            sfixed32_ = other.sfixed32_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureSfixed32IsMutable();
            sfixed32_.addAll(other.sfixed32_);
          }
          onChanged();
        }
        if (!other.float_.isEmpty()) {
          if (float_.isEmpty()) {
            float_ = other.float_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureFloatIsMutable();
            float_.addAll(other.float_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ckm.util.pb.PBTest.ListTest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ckm.util.pb.PBTest.ListTest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> int32_ = java.util.Collections.emptyList();
      private void ensureInt32IsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          int32_ = new java.util.ArrayList<java.lang.Integer>(int32_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 int32 = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getInt32List() {
        return java.util.Collections.unmodifiableList(int32_);
      }
      /**
       * <code>repeated int32 int32 = 1;</code>
       */
      public int getInt32Count() {
        return int32_.size();
      }
      /**
       * <code>repeated int32 int32 = 1;</code>
       */
      public int getInt32(int index) {
        return int32_.get(index);
      }
      /**
       * <code>repeated int32 int32 = 1;</code>
       */
      public Builder setInt32(
          int index, int value) {
        ensureInt32IsMutable();
        int32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int32 = 1;</code>
       */
      public Builder addInt32(int value) {
        ensureInt32IsMutable();
        int32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int32 = 1;</code>
       */
      public Builder addAllInt32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInt32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int32 = 1;</code>
       */
      public Builder clearInt32() {
        int32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> int64_ = java.util.Collections.emptyList();
      private void ensureInt64IsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          int64_ = new java.util.ArrayList<java.lang.Long>(int64_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int64 int64 = 2;</code>
       */
      public java.util.List<java.lang.Long>
          getInt64List() {
        return java.util.Collections.unmodifiableList(int64_);
      }
      /**
       * <code>repeated int64 int64 = 2;</code>
       */
      public int getInt64Count() {
        return int64_.size();
      }
      /**
       * <code>repeated int64 int64 = 2;</code>
       */
      public long getInt64(int index) {
        return int64_.get(index);
      }
      /**
       * <code>repeated int64 int64 = 2;</code>
       */
      public Builder setInt64(
          int index, long value) {
        ensureInt64IsMutable();
        int64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64 = 2;</code>
       */
      public Builder addInt64(long value) {
        ensureInt64IsMutable();
        int64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64 = 2;</code>
       */
      public Builder addAllInt64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureInt64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64 = 2;</code>
       */
      public Builder clearInt64() {
        int64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> uint32_ = java.util.Collections.emptyList();
      private void ensureUint32IsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          uint32_ = new java.util.ArrayList<java.lang.Integer>(uint32_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 uint32 = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getUint32List() {
        return java.util.Collections.unmodifiableList(uint32_);
      }
      /**
       * <code>repeated uint32 uint32 = 3;</code>
       */
      public int getUint32Count() {
        return uint32_.size();
      }
      /**
       * <code>repeated uint32 uint32 = 3;</code>
       */
      public int getUint32(int index) {
        return uint32_.get(index);
      }
      /**
       * <code>repeated uint32 uint32 = 3;</code>
       */
      public Builder setUint32(
          int index, int value) {
        ensureUint32IsMutable();
        uint32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 uint32 = 3;</code>
       */
      public Builder addUint32(int value) {
        ensureUint32IsMutable();
        uint32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 uint32 = 3;</code>
       */
      public Builder addAllUint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUint32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, uint32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 uint32 = 3;</code>
       */
      public Builder clearUint32() {
        uint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> uint64_ = java.util.Collections.emptyList();
      private void ensureUint64IsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          uint64_ = new java.util.ArrayList<java.lang.Long>(uint64_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint64 uint64 = 4;</code>
       */
      public java.util.List<java.lang.Long>
          getUint64List() {
        return java.util.Collections.unmodifiableList(uint64_);
      }
      /**
       * <code>repeated uint64 uint64 = 4;</code>
       */
      public int getUint64Count() {
        return uint64_.size();
      }
      /**
       * <code>repeated uint64 uint64 = 4;</code>
       */
      public long getUint64(int index) {
        return uint64_.get(index);
      }
      /**
       * <code>repeated uint64 uint64 = 4;</code>
       */
      public Builder setUint64(
          int index, long value) {
        ensureUint64IsMutable();
        uint64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 uint64 = 4;</code>
       */
      public Builder addUint64(long value) {
        ensureUint64IsMutable();
        uint64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 uint64 = 4;</code>
       */
      public Builder addAllUint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureUint64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, uint64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 uint64 = 4;</code>
       */
      public Builder clearUint64() {
        uint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> sint32_ = java.util.Collections.emptyList();
      private void ensureSint32IsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          sint32_ = new java.util.ArrayList<java.lang.Integer>(sint32_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated sint32 sint32 = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getSint32List() {
        return java.util.Collections.unmodifiableList(sint32_);
      }
      /**
       * <code>repeated sint32 sint32 = 5;</code>
       */
      public int getSint32Count() {
        return sint32_.size();
      }
      /**
       * <code>repeated sint32 sint32 = 5;</code>
       */
      public int getSint32(int index) {
        return sint32_.get(index);
      }
      /**
       * <code>repeated sint32 sint32 = 5;</code>
       */
      public Builder setSint32(
          int index, int value) {
        ensureSint32IsMutable();
        sint32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 sint32 = 5;</code>
       */
      public Builder addSint32(int value) {
        ensureSint32IsMutable();
        sint32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 sint32 = 5;</code>
       */
      public Builder addAllSint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSint32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sint32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 sint32 = 5;</code>
       */
      public Builder clearSint32() {
        sint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> sint64_ = java.util.Collections.emptyList();
      private void ensureSint64IsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          sint64_ = new java.util.ArrayList<java.lang.Long>(sint64_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated sint64 sint64 = 6;</code>
       */
      public java.util.List<java.lang.Long>
          getSint64List() {
        return java.util.Collections.unmodifiableList(sint64_);
      }
      /**
       * <code>repeated sint64 sint64 = 6;</code>
       */
      public int getSint64Count() {
        return sint64_.size();
      }
      /**
       * <code>repeated sint64 sint64 = 6;</code>
       */
      public long getSint64(int index) {
        return sint64_.get(index);
      }
      /**
       * <code>repeated sint64 sint64 = 6;</code>
       */
      public Builder setSint64(
          int index, long value) {
        ensureSint64IsMutable();
        sint64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 sint64 = 6;</code>
       */
      public Builder addSint64(long value) {
        ensureSint64IsMutable();
        sint64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 sint64 = 6;</code>
       */
      public Builder addAllSint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureSint64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sint64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 sint64 = 6;</code>
       */
      public Builder clearSint64() {
        sint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Boolean> bool_ = java.util.Collections.emptyList();
      private void ensureBoolIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          bool_ = new java.util.ArrayList<java.lang.Boolean>(bool_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated bool bool = 7;</code>
       */
      public java.util.List<java.lang.Boolean>
          getBoolList() {
        return java.util.Collections.unmodifiableList(bool_);
      }
      /**
       * <code>repeated bool bool = 7;</code>
       */
      public int getBoolCount() {
        return bool_.size();
      }
      /**
       * <code>repeated bool bool = 7;</code>
       */
      public boolean getBool(int index) {
        return bool_.get(index);
      }
      /**
       * <code>repeated bool bool = 7;</code>
       */
      public Builder setBool(
          int index, boolean value) {
        ensureBoolIsMutable();
        bool_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool = 7;</code>
       */
      public Builder addBool(boolean value) {
        ensureBoolIsMutable();
        bool_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool = 7;</code>
       */
      public Builder addAllBool(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureBoolIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bool_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool = 7;</code>
       */
      public Builder clearBool() {
        bool_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> fixed64_ = java.util.Collections.emptyList();
      private void ensureFixed64IsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          fixed64_ = new java.util.ArrayList<java.lang.Long>(fixed64_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated fixed64 fixed64 = 9;</code>
       */
      public java.util.List<java.lang.Long>
          getFixed64List() {
        return java.util.Collections.unmodifiableList(fixed64_);
      }
      /**
       * <code>repeated fixed64 fixed64 = 9;</code>
       */
      public int getFixed64Count() {
        return fixed64_.size();
      }
      /**
       * <code>repeated fixed64 fixed64 = 9;</code>
       */
      public long getFixed64(int index) {
        return fixed64_.get(index);
      }
      /**
       * <code>repeated fixed64 fixed64 = 9;</code>
       */
      public Builder setFixed64(
          int index, long value) {
        ensureFixed64IsMutable();
        fixed64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 fixed64 = 9;</code>
       */
      public Builder addFixed64(long value) {
        ensureFixed64IsMutable();
        fixed64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 fixed64 = 9;</code>
       */
      public Builder addAllFixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureFixed64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fixed64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 fixed64 = 9;</code>
       */
      public Builder clearFixed64() {
        fixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> sfixed64_ = java.util.Collections.emptyList();
      private void ensureSfixed64IsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          sfixed64_ = new java.util.ArrayList<java.lang.Long>(sfixed64_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated sfixed64 sfixed64 = 10;</code>
       */
      public java.util.List<java.lang.Long>
          getSfixed64List() {
        return java.util.Collections.unmodifiableList(sfixed64_);
      }
      /**
       * <code>repeated sfixed64 sfixed64 = 10;</code>
       */
      public int getSfixed64Count() {
        return sfixed64_.size();
      }
      /**
       * <code>repeated sfixed64 sfixed64 = 10;</code>
       */
      public long getSfixed64(int index) {
        return sfixed64_.get(index);
      }
      /**
       * <code>repeated sfixed64 sfixed64 = 10;</code>
       */
      public Builder setSfixed64(
          int index, long value) {
        ensureSfixed64IsMutable();
        sfixed64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 sfixed64 = 10;</code>
       */
      public Builder addSfixed64(long value) {
        ensureSfixed64IsMutable();
        sfixed64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 sfixed64 = 10;</code>
       */
      public Builder addAllSfixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureSfixed64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sfixed64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 sfixed64 = 10;</code>
       */
      public Builder clearSfixed64() {
        sfixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> double_ = java.util.Collections.emptyList();
      private void ensureDoubleIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          double_ = new java.util.ArrayList<java.lang.Double>(double_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated double double = 11;</code>
       */
      public java.util.List<java.lang.Double>
          getDoubleList() {
        return java.util.Collections.unmodifiableList(double_);
      }
      /**
       * <code>repeated double double = 11;</code>
       */
      public int getDoubleCount() {
        return double_.size();
      }
      /**
       * <code>repeated double double = 11;</code>
       */
      public double getDouble(int index) {
        return double_.get(index);
      }
      /**
       * <code>repeated double double = 11;</code>
       */
      public Builder setDouble(
          int index, double value) {
        ensureDoubleIsMutable();
        double_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double = 11;</code>
       */
      public Builder addDouble(double value) {
        ensureDoubleIsMutable();
        double_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double = 11;</code>
       */
      public Builder addAllDouble(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, double_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double = 11;</code>
       */
      public Builder clearDouble() {
        double_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList string_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          string_ = new com.google.protobuf.LazyStringArrayList(string_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getStringList() {
        return string_.getUnmodifiableView();
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public int getStringCount() {
        return string_.size();
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public java.lang.String getString(int index) {
        return string_.get(index);
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public com.google.protobuf.ByteString
          getStringBytes(int index) {
        return string_.getByteString(index);
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public Builder setString(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public Builder addString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public Builder addAllString(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, string_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public Builder clearString() {
        string_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 12;</code>
       */
      public Builder addStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> fixed32_ = java.util.Collections.emptyList();
      private void ensureFixed32IsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          fixed32_ = new java.util.ArrayList<java.lang.Integer>(fixed32_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated fixed32 fixed32 = 14;</code>
       */
      public java.util.List<java.lang.Integer>
          getFixed32List() {
        return java.util.Collections.unmodifiableList(fixed32_);
      }
      /**
       * <code>repeated fixed32 fixed32 = 14;</code>
       */
      public int getFixed32Count() {
        return fixed32_.size();
      }
      /**
       * <code>repeated fixed32 fixed32 = 14;</code>
       */
      public int getFixed32(int index) {
        return fixed32_.get(index);
      }
      /**
       * <code>repeated fixed32 fixed32 = 14;</code>
       */
      public Builder setFixed32(
          int index, int value) {
        ensureFixed32IsMutable();
        fixed32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 fixed32 = 14;</code>
       */
      public Builder addFixed32(int value) {
        ensureFixed32IsMutable();
        fixed32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 fixed32 = 14;</code>
       */
      public Builder addAllFixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFixed32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fixed32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 fixed32 = 14;</code>
       */
      public Builder clearFixed32() {
        fixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> sfixed32_ = java.util.Collections.emptyList();
      private void ensureSfixed32IsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          sfixed32_ = new java.util.ArrayList<java.lang.Integer>(sfixed32_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated sfixed32 sfixed32 = 15;</code>
       */
      public java.util.List<java.lang.Integer>
          getSfixed32List() {
        return java.util.Collections.unmodifiableList(sfixed32_);
      }
      /**
       * <code>repeated sfixed32 sfixed32 = 15;</code>
       */
      public int getSfixed32Count() {
        return sfixed32_.size();
      }
      /**
       * <code>repeated sfixed32 sfixed32 = 15;</code>
       */
      public int getSfixed32(int index) {
        return sfixed32_.get(index);
      }
      /**
       * <code>repeated sfixed32 sfixed32 = 15;</code>
       */
      public Builder setSfixed32(
          int index, int value) {
        ensureSfixed32IsMutable();
        sfixed32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 sfixed32 = 15;</code>
       */
      public Builder addSfixed32(int value) {
        ensureSfixed32IsMutable();
        sfixed32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 sfixed32 = 15;</code>
       */
      public Builder addAllSfixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSfixed32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sfixed32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 sfixed32 = 15;</code>
       */
      public Builder clearSfixed32() {
        sfixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> float_ = java.util.Collections.emptyList();
      private void ensureFloatIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          float_ = new java.util.ArrayList<java.lang.Float>(float_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated float float = 16;</code>
       */
      public java.util.List<java.lang.Float>
          getFloatList() {
        return java.util.Collections.unmodifiableList(float_);
      }
      /**
       * <code>repeated float float = 16;</code>
       */
      public int getFloatCount() {
        return float_.size();
      }
      /**
       * <code>repeated float float = 16;</code>
       */
      public float getFloat(int index) {
        return float_.get(index);
      }
      /**
       * <code>repeated float float = 16;</code>
       */
      public Builder setFloat(
          int index, float value) {
        ensureFloatIsMutable();
        float_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float = 16;</code>
       */
      public Builder addFloat(float value) {
        ensureFloatIsMutable();
        float_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float = 16;</code>
       */
      public Builder addAllFloat(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, float_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float = 16;</code>
       */
      public Builder clearFloat() {
        float_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tutorial.ListTest)
    }

    // @@protoc_insertion_point(class_scope:tutorial.ListTest)
    private static final com.ckm.util.pb.PBTest.ListTest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.ckm.util.pb.PBTest.ListTest();
    }

    public static com.ckm.util.pb.PBTest.ListTest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ListTest>
        PARSER = new com.google.protobuf.AbstractParser<ListTest>() {
      @java.lang.Override
      public ListTest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ListTest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ListTest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ListTest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.ckm.util.pb.PBTest.ListTest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MapTestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tutorial.MapTest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */
    int getInt32MapCount();
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */
    boolean containsInt32Map(
        java.lang.String key);
    /**
     * Use {@link #getInt32MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getInt32Map();
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getInt32MapMap();
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */

    int getInt32MapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */

    int getInt32MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */
    int getInt64MapCount();
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */
    boolean containsInt64Map(
        java.lang.String key);
    /**
     * Use {@link #getInt64MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getInt64Map();
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getInt64MapMap();
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */

    long getInt64MapOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */

    long getInt64MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */
    int getUint32MapCount();
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */
    boolean containsUint32Map(
        java.lang.String key);
    /**
     * Use {@link #getUint32MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getUint32Map();
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getUint32MapMap();
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */

    int getUint32MapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */

    int getUint32MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */
    int getUint64MapCount();
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */
    boolean containsUint64Map(
        java.lang.String key);
    /**
     * Use {@link #getUint64MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getUint64Map();
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getUint64MapMap();
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */

    long getUint64MapOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */

    long getUint64MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */
    int getSint32MapCount();
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */
    boolean containsSint32Map(
        java.lang.String key);
    /**
     * Use {@link #getSint32MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getSint32Map();
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getSint32MapMap();
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */

    int getSint32MapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */

    int getSint32MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */
    int getSint64MapCount();
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */
    boolean containsSint64Map(
        java.lang.String key);
    /**
     * Use {@link #getSint64MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getSint64Map();
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getSint64MapMap();
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */

    long getSint64MapOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */

    long getSint64MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */
    int getBoolmapCount();
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */
    boolean containsBoolmap(
        java.lang.String key);
    /**
     * Use {@link #getBoolmapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Boolean>
    getBoolmap();
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */
    java.util.Map<java.lang.String, java.lang.Boolean>
    getBoolmapMap();
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */

    boolean getBoolmapOrDefault(
        java.lang.String key,
        boolean defaultValue);
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */

    boolean getBoolmapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */
    int getFixed64MapCount();
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */
    boolean containsFixed64Map(
        java.lang.String key);
    /**
     * Use {@link #getFixed64MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getFixed64Map();
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getFixed64MapMap();
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */

    long getFixed64MapOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */

    long getFixed64MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */
    int getSfixed64MapCount();
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */
    boolean containsSfixed64Map(
        java.lang.String key);
    /**
     * Use {@link #getSfixed64MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getSfixed64Map();
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getSfixed64MapMap();
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */

    long getSfixed64MapOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */

    long getSfixed64MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */
    int getDoublemapCount();
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */
    boolean containsDoublemap(
        java.lang.String key);
    /**
     * Use {@link #getDoublemapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Double>
    getDoublemap();
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */
    java.util.Map<java.lang.String, java.lang.Double>
    getDoublemapMap();
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */

    double getDoublemapOrDefault(
        java.lang.String key,
        double defaultValue);
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */

    double getDoublemapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */
    int getStringmapCount();
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */
    boolean containsStringmap(
        java.lang.String key);
    /**
     * Use {@link #getStringmapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getStringmap();
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getStringmapMap();
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */

    java.lang.String getStringmapOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */

    java.lang.String getStringmapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */
    int getFixed32MapCount();
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */
    boolean containsFixed32Map(
        java.lang.String key);
    /**
     * Use {@link #getFixed32MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getFixed32Map();
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getFixed32MapMap();
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */

    int getFixed32MapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */

    int getFixed32MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */
    int getSfixed32MapCount();
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */
    boolean containsSfixed32Map(
        java.lang.String key);
    /**
     * Use {@link #getSfixed32MapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getSfixed32Map();
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getSfixed32MapMap();
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */

    int getSfixed32MapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */

    int getSfixed32MapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */
    int getFloatmapCount();
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */
    boolean containsFloatmap(
        java.lang.String key);
    /**
     * Use {@link #getFloatmapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Float>
    getFloatmap();
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */
    java.util.Map<java.lang.String, java.lang.Float>
    getFloatmapMap();
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */

    float getFloatmapOrDefault(
        java.lang.String key,
        float defaultValue);
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */

    float getFloatmapOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code tutorial.MapTest}
   */
  public  static final class MapTest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tutorial.MapTest)
      MapTestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MapTest.newBuilder() to construct.
    private MapTest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MapTest() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MapTest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                int32Map_ = com.google.protobuf.MapField.newMapField(
                    Int32MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              int32Map__ = input.readMessage(
                  Int32MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              int32Map_.getMutableMap().put(
                  int32Map__.getKey(), int32Map__.getValue());
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                int64Map_ = com.google.protobuf.MapField.newMapField(
                    Int64MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
              int64Map__ = input.readMessage(
                  Int64MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              int64Map_.getMutableMap().put(
                  int64Map__.getKey(), int64Map__.getValue());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                uint32Map_ = com.google.protobuf.MapField.newMapField(
                    Uint32MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              uint32Map__ = input.readMessage(
                  Uint32MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              uint32Map_.getMutableMap().put(
                  uint32Map__.getKey(), uint32Map__.getValue());
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                uint64Map_ = com.google.protobuf.MapField.newMapField(
                    Uint64MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000008;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
              uint64Map__ = input.readMessage(
                  Uint64MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              uint64Map_.getMutableMap().put(
                  uint64Map__.getKey(), uint64Map__.getValue());
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                sint32Map_ = com.google.protobuf.MapField.newMapField(
                    Sint32MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              sint32Map__ = input.readMessage(
                  Sint32MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              sint32Map_.getMutableMap().put(
                  sint32Map__.getKey(), sint32Map__.getValue());
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                sint64Map_ = com.google.protobuf.MapField.newMapField(
                    Sint64MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000020;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
              sint64Map__ = input.readMessage(
                  Sint64MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              sint64Map_.getMutableMap().put(
                  sint64Map__.getKey(), sint64Map__.getValue());
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                boolmap_ = com.google.protobuf.MapField.newMapField(
                    BoolmapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000040;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Boolean>
              boolmap__ = input.readMessage(
                  BoolmapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              boolmap_.getMutableMap().put(
                  boolmap__.getKey(), boolmap__.getValue());
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                fixed64Map_ = com.google.protobuf.MapField.newMapField(
                    Fixed64MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000080;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
              fixed64Map__ = input.readMessage(
                  Fixed64MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              fixed64Map_.getMutableMap().put(
                  fixed64Map__.getKey(), fixed64Map__.getValue());
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                sfixed64Map_ = com.google.protobuf.MapField.newMapField(
                    Sfixed64MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000100;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
              sfixed64Map__ = input.readMessage(
                  Sfixed64MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              sfixed64Map_.getMutableMap().put(
                  sfixed64Map__.getKey(), sfixed64Map__.getValue());
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                doublemap_ = com.google.protobuf.MapField.newMapField(
                    DoublemapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000200;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
              doublemap__ = input.readMessage(
                  DoublemapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              doublemap_.getMutableMap().put(
                  doublemap__.getKey(), doublemap__.getValue());
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                stringmap_ = com.google.protobuf.MapField.newMapField(
                    StringmapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000400;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              stringmap__ = input.readMessage(
                  StringmapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              stringmap_.getMutableMap().put(
                  stringmap__.getKey(), stringmap__.getValue());
              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                fixed32Map_ = com.google.protobuf.MapField.newMapField(
                    Fixed32MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000800;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              fixed32Map__ = input.readMessage(
                  Fixed32MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              fixed32Map_.getMutableMap().put(
                  fixed32Map__.getKey(), fixed32Map__.getValue());
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                sfixed32Map_ = com.google.protobuf.MapField.newMapField(
                    Sfixed32MapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00001000;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              sfixed32Map__ = input.readMessage(
                  Sfixed32MapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              sfixed32Map_.getMutableMap().put(
                  sfixed32Map__.getKey(), sfixed32Map__.getValue());
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                floatmap_ = com.google.protobuf.MapField.newMapField(
                    FloatmapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00002000;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Float>
              floatmap__ = input.readMessage(
                  FloatmapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              floatmap_.getMutableMap().put(
                  floatmap__.getKey(), floatmap__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetInt32Map();
        case 2:
          return internalGetInt64Map();
        case 3:
          return internalGetUint32Map();
        case 4:
          return internalGetUint64Map();
        case 5:
          return internalGetSint32Map();
        case 6:
          return internalGetSint64Map();
        case 7:
          return internalGetBoolmap();
        case 8:
          return internalGetFixed64Map();
        case 9:
          return internalGetSfixed64Map();
        case 10:
          return internalGetDoublemap();
        case 11:
          return internalGetStringmap();
        case 12:
          return internalGetFixed32Map();
        case 13:
          return internalGetSfixed32Map();
        case 14:
          return internalGetFloatmap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ckm.util.pb.PBTest.MapTest.class, com.ckm.util.pb.PBTest.MapTest.Builder.class);
    }

    public static final int INT32MAP_FIELD_NUMBER = 1;
    private static final class Int32MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Int32mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> int32Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetInt32Map() {
      if (int32Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Int32MapDefaultEntryHolder.defaultEntry);
      }
      return int32Map_;
    }

    public int getInt32MapCount() {
      return internalGetInt32Map().getMap().size();
    }
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */

    public boolean containsInt32Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetInt32Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getInt32MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getInt32Map() {
      return getInt32MapMap();
    }
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getInt32MapMap() {
      return internalGetInt32Map().getMap();
    }
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */

    public int getInt32MapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetInt32Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int32&gt; int32map = 1;</code>
     */

    public int getInt32MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetInt32Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int INT64MAP_FIELD_NUMBER = 2;
    private static final class Int64MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Int64mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Long> int64Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
    internalGetInt64Map() {
      if (int64Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Int64MapDefaultEntryHolder.defaultEntry);
      }
      return int64Map_;
    }

    public int getInt64MapCount() {
      return internalGetInt64Map().getMap().size();
    }
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */

    public boolean containsInt64Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetInt64Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getInt64MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getInt64Map() {
      return getInt64MapMap();
    }
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Long> getInt64MapMap() {
      return internalGetInt64Map().getMap();
    }
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */

    public long getInt64MapOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetInt64Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int64&gt; int64map = 2;</code>
     */

    public long getInt64MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetInt64Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int UINT32MAP_FIELD_NUMBER = 3;
    private static final class Uint32MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Uint32mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> uint32Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetUint32Map() {
      if (uint32Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Uint32MapDefaultEntryHolder.defaultEntry);
      }
      return uint32Map_;
    }

    public int getUint32MapCount() {
      return internalGetUint32Map().getMap().size();
    }
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */

    public boolean containsUint32Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetUint32Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getUint32MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getUint32Map() {
      return getUint32MapMap();
    }
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getUint32MapMap() {
      return internalGetUint32Map().getMap();
    }
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */

    public int getUint32MapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetUint32Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
     */

    public int getUint32MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetUint32Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int UINT64MAP_FIELD_NUMBER = 4;
    private static final class Uint64MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Uint64mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Long> uint64Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
    internalGetUint64Map() {
      if (uint64Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Uint64MapDefaultEntryHolder.defaultEntry);
      }
      return uint64Map_;
    }

    public int getUint64MapCount() {
      return internalGetUint64Map().getMap().size();
    }
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */

    public boolean containsUint64Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetUint64Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getUint64MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getUint64Map() {
      return getUint64MapMap();
    }
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Long> getUint64MapMap() {
      return internalGetUint64Map().getMap();
    }
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */

    public long getUint64MapOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetUint64Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
     */

    public long getUint64MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetUint64Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int SINT32MAP_FIELD_NUMBER = 5;
    private static final class Sint32MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Sint32mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> sint32Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetSint32Map() {
      if (sint32Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Sint32MapDefaultEntryHolder.defaultEntry);
      }
      return sint32Map_;
    }

    public int getSint32MapCount() {
      return internalGetSint32Map().getMap().size();
    }
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */

    public boolean containsSint32Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetSint32Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSint32MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getSint32Map() {
      return getSint32MapMap();
    }
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getSint32MapMap() {
      return internalGetSint32Map().getMap();
    }
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */

    public int getSint32MapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetSint32Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
     */

    public int getSint32MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetSint32Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int SINT64MAP_FIELD_NUMBER = 6;
    private static final class Sint64MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Sint64mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Long> sint64Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
    internalGetSint64Map() {
      if (sint64Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Sint64MapDefaultEntryHolder.defaultEntry);
      }
      return sint64Map_;
    }

    public int getSint64MapCount() {
      return internalGetSint64Map().getMap().size();
    }
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */

    public boolean containsSint64Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetSint64Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSint64MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getSint64Map() {
      return getSint64MapMap();
    }
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Long> getSint64MapMap() {
      return internalGetSint64Map().getMap();
    }
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */

    public long getSint64MapOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetSint64Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
     */

    public long getSint64MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetSint64Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int BOOLMAP_FIELD_NUMBER = 7;
    private static final class BoolmapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Boolean>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_BoolmapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Boolean> boolmap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Boolean>
    internalGetBoolmap() {
      if (boolmap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            BoolmapDefaultEntryHolder.defaultEntry);
      }
      return boolmap_;
    }

    public int getBoolmapCount() {
      return internalGetBoolmap().getMap().size();
    }
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */

    public boolean containsBoolmap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetBoolmap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getBoolmapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Boolean> getBoolmap() {
      return getBoolmapMap();
    }
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Boolean> getBoolmapMap() {
      return internalGetBoolmap().getMap();
    }
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */

    public boolean getBoolmapOrDefault(
        java.lang.String key,
        boolean defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Boolean> map =
          internalGetBoolmap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, bool&gt; boolmap = 7;</code>
     */

    public boolean getBoolmapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Boolean> map =
          internalGetBoolmap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int FIXED64MAP_FIELD_NUMBER = 8;
    private static final class Fixed64MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Fixed64mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Long> fixed64Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
    internalGetFixed64Map() {
      if (fixed64Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Fixed64MapDefaultEntryHolder.defaultEntry);
      }
      return fixed64Map_;
    }

    public int getFixed64MapCount() {
      return internalGetFixed64Map().getMap().size();
    }
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */

    public boolean containsFixed64Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetFixed64Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFixed64MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getFixed64Map() {
      return getFixed64MapMap();
    }
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Long> getFixed64MapMap() {
      return internalGetFixed64Map().getMap();
    }
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */

    public long getFixed64MapOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFixed64Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
     */

    public long getFixed64MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFixed64Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int SFIXED64MAP_FIELD_NUMBER = 9;
    private static final class Sfixed64MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Sfixed64mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Long> sfixed64Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
    internalGetSfixed64Map() {
      if (sfixed64Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Sfixed64MapDefaultEntryHolder.defaultEntry);
      }
      return sfixed64Map_;
    }

    public int getSfixed64MapCount() {
      return internalGetSfixed64Map().getMap().size();
    }
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */

    public boolean containsSfixed64Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetSfixed64Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSfixed64MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getSfixed64Map() {
      return getSfixed64MapMap();
    }
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Long> getSfixed64MapMap() {
      return internalGetSfixed64Map().getMap();
    }
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */

    public long getSfixed64MapOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetSfixed64Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
     */

    public long getSfixed64MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetSfixed64Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int DOUBLEMAP_FIELD_NUMBER = 10;
    private static final class DoublemapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Double>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_DoublemapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Double> doublemap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
    internalGetDoublemap() {
      if (doublemap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DoublemapDefaultEntryHolder.defaultEntry);
      }
      return doublemap_;
    }

    public int getDoublemapCount() {
      return internalGetDoublemap().getMap().size();
    }
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */

    public boolean containsDoublemap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetDoublemap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDoublemapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double> getDoublemap() {
      return getDoublemapMap();
    }
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Double> getDoublemapMap() {
      return internalGetDoublemap().getMap();
    }
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */

    public double getDoublemapOrDefault(
        java.lang.String key,
        double defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetDoublemap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, double&gt; doublemap = 10;</code>
     */

    public double getDoublemapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetDoublemap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STRINGMAP_FIELD_NUMBER = 11;
    private static final class StringmapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_StringmapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> stringmap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetStringmap() {
      if (stringmap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StringmapDefaultEntryHolder.defaultEntry);
      }
      return stringmap_;
    }

    public int getStringmapCount() {
      return internalGetStringmap().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */

    public boolean containsStringmap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetStringmap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStringmapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getStringmap() {
      return getStringmapMap();
    }
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getStringmapMap() {
      return internalGetStringmap().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */

    public java.lang.String getStringmapOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringmap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; stringmap = 11;</code>
     */

    public java.lang.String getStringmapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringmap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int FIXED32MAP_FIELD_NUMBER = 12;
    private static final class Fixed32MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Fixed32mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> fixed32Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetFixed32Map() {
      if (fixed32Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Fixed32MapDefaultEntryHolder.defaultEntry);
      }
      return fixed32Map_;
    }

    public int getFixed32MapCount() {
      return internalGetFixed32Map().getMap().size();
    }
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */

    public boolean containsFixed32Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetFixed32Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFixed32MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getFixed32Map() {
      return getFixed32MapMap();
    }
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getFixed32MapMap() {
      return internalGetFixed32Map().getMap();
    }
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */

    public int getFixed32MapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFixed32Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
     */

    public int getFixed32MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFixed32Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int SFIXED32MAP_FIELD_NUMBER = 13;
    private static final class Sfixed32MapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_Sfixed32mapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> sfixed32Map_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetSfixed32Map() {
      if (sfixed32Map_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Sfixed32MapDefaultEntryHolder.defaultEntry);
      }
      return sfixed32Map_;
    }

    public int getSfixed32MapCount() {
      return internalGetSfixed32Map().getMap().size();
    }
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */

    public boolean containsSfixed32Map(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetSfixed32Map().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSfixed32MapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getSfixed32Map() {
      return getSfixed32MapMap();
    }
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getSfixed32MapMap() {
      return internalGetSfixed32Map().getMap();
    }
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */

    public int getSfixed32MapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetSfixed32Map().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
     */

    public int getSfixed32MapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetSfixed32Map().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int FLOATMAP_FIELD_NUMBER = 14;
    private static final class FloatmapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Float>newDefaultInstance(
                  com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_FloatmapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Float> floatmap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Float>
    internalGetFloatmap() {
      if (floatmap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            FloatmapDefaultEntryHolder.defaultEntry);
      }
      return floatmap_;
    }

    public int getFloatmapCount() {
      return internalGetFloatmap().getMap().size();
    }
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */

    public boolean containsFloatmap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetFloatmap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFloatmapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Float> getFloatmap() {
      return getFloatmapMap();
    }
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Float> getFloatmapMap() {
      return internalGetFloatmap().getMap();
    }
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */

    public float getFloatmapOrDefault(
        java.lang.String key,
        float defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Float> map =
          internalGetFloatmap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, float&gt; floatmap = 14;</code>
     */

    public float getFloatmapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Float> map =
          internalGetFloatmap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetInt32Map(),
          Int32MapDefaultEntryHolder.defaultEntry,
          1);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetInt64Map(),
          Int64MapDefaultEntryHolder.defaultEntry,
          2);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetUint32Map(),
          Uint32MapDefaultEntryHolder.defaultEntry,
          3);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetUint64Map(),
          Uint64MapDefaultEntryHolder.defaultEntry,
          4);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetSint32Map(),
          Sint32MapDefaultEntryHolder.defaultEntry,
          5);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetSint64Map(),
          Sint64MapDefaultEntryHolder.defaultEntry,
          6);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetBoolmap(),
          BoolmapDefaultEntryHolder.defaultEntry,
          7);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetFixed64Map(),
          Fixed64MapDefaultEntryHolder.defaultEntry,
          8);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetSfixed64Map(),
          Sfixed64MapDefaultEntryHolder.defaultEntry,
          9);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetDoublemap(),
          DoublemapDefaultEntryHolder.defaultEntry,
          10);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetStringmap(),
          StringmapDefaultEntryHolder.defaultEntry,
          11);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetFixed32Map(),
          Fixed32MapDefaultEntryHolder.defaultEntry,
          12);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetSfixed32Map(),
          Sfixed32MapDefaultEntryHolder.defaultEntry,
          13);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetFloatmap(),
          FloatmapDefaultEntryHolder.defaultEntry,
          14);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetInt32Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        int32Map__ = Int32MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, int32Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetInt64Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
        int64Map__ = Int64MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, int64Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetUint32Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        uint32Map__ = Uint32MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, uint32Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetUint64Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
        uint64Map__ = Uint64MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, uint64Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetSint32Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        sint32Map__ = Sint32MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, sint32Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetSint64Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
        sint64Map__ = Sint64MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, sint64Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> entry
           : internalGetBoolmap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Boolean>
        boolmap__ = BoolmapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, boolmap__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetFixed64Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
        fixed64Map__ = Fixed64MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, fixed64Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetSfixed64Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
        sfixed64Map__ = Sfixed64MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, sfixed64Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
           : internalGetDoublemap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
        doublemap__ = DoublemapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, doublemap__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetStringmap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        stringmap__ = StringmapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, stringmap__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetFixed32Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        fixed32Map__ = Fixed32MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, fixed32Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetSfixed32Map().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        sfixed32Map__ = Sfixed32MapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, sfixed32Map__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Float> entry
           : internalGetFloatmap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Float>
        floatmap__ = FloatmapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, floatmap__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.ckm.util.pb.PBTest.MapTest)) {
        return super.equals(obj);
      }
      com.ckm.util.pb.PBTest.MapTest other = (com.ckm.util.pb.PBTest.MapTest) obj;

      boolean result = true;
      result = result && internalGetInt32Map().equals(
          other.internalGetInt32Map());
      result = result && internalGetInt64Map().equals(
          other.internalGetInt64Map());
      result = result && internalGetUint32Map().equals(
          other.internalGetUint32Map());
      result = result && internalGetUint64Map().equals(
          other.internalGetUint64Map());
      result = result && internalGetSint32Map().equals(
          other.internalGetSint32Map());
      result = result && internalGetSint64Map().equals(
          other.internalGetSint64Map());
      result = result && internalGetBoolmap().equals(
          other.internalGetBoolmap());
      result = result && internalGetFixed64Map().equals(
          other.internalGetFixed64Map());
      result = result && internalGetSfixed64Map().equals(
          other.internalGetSfixed64Map());
      result = result && internalGetDoublemap().equals(
          other.internalGetDoublemap());
      result = result && internalGetStringmap().equals(
          other.internalGetStringmap());
      result = result && internalGetFixed32Map().equals(
          other.internalGetFixed32Map());
      result = result && internalGetSfixed32Map().equals(
          other.internalGetSfixed32Map());
      result = result && internalGetFloatmap().equals(
          other.internalGetFloatmap());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetInt32Map().getMap().isEmpty()) {
        hash = (37 * hash) + INT32MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetInt32Map().hashCode();
      }
      if (!internalGetInt64Map().getMap().isEmpty()) {
        hash = (37 * hash) + INT64MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetInt64Map().hashCode();
      }
      if (!internalGetUint32Map().getMap().isEmpty()) {
        hash = (37 * hash) + UINT32MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetUint32Map().hashCode();
      }
      if (!internalGetUint64Map().getMap().isEmpty()) {
        hash = (37 * hash) + UINT64MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetUint64Map().hashCode();
      }
      if (!internalGetSint32Map().getMap().isEmpty()) {
        hash = (37 * hash) + SINT32MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetSint32Map().hashCode();
      }
      if (!internalGetSint64Map().getMap().isEmpty()) {
        hash = (37 * hash) + SINT64MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetSint64Map().hashCode();
      }
      if (!internalGetBoolmap().getMap().isEmpty()) {
        hash = (37 * hash) + BOOLMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetBoolmap().hashCode();
      }
      if (!internalGetFixed64Map().getMap().isEmpty()) {
        hash = (37 * hash) + FIXED64MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetFixed64Map().hashCode();
      }
      if (!internalGetSfixed64Map().getMap().isEmpty()) {
        hash = (37 * hash) + SFIXED64MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetSfixed64Map().hashCode();
      }
      if (!internalGetDoublemap().getMap().isEmpty()) {
        hash = (37 * hash) + DOUBLEMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetDoublemap().hashCode();
      }
      if (!internalGetStringmap().getMap().isEmpty()) {
        hash = (37 * hash) + STRINGMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetStringmap().hashCode();
      }
      if (!internalGetFixed32Map().getMap().isEmpty()) {
        hash = (37 * hash) + FIXED32MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetFixed32Map().hashCode();
      }
      if (!internalGetSfixed32Map().getMap().isEmpty()) {
        hash = (37 * hash) + SFIXED32MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetSfixed32Map().hashCode();
      }
      if (!internalGetFloatmap().getMap().isEmpty()) {
        hash = (37 * hash) + FLOATMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetFloatmap().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ckm.util.pb.PBTest.MapTest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ckm.util.pb.PBTest.MapTest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tutorial.MapTest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tutorial.MapTest)
        com.ckm.util.pb.PBTest.MapTestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetInt32Map();
          case 2:
            return internalGetInt64Map();
          case 3:
            return internalGetUint32Map();
          case 4:
            return internalGetUint64Map();
          case 5:
            return internalGetSint32Map();
          case 6:
            return internalGetSint64Map();
          case 7:
            return internalGetBoolmap();
          case 8:
            return internalGetFixed64Map();
          case 9:
            return internalGetSfixed64Map();
          case 10:
            return internalGetDoublemap();
          case 11:
            return internalGetStringmap();
          case 12:
            return internalGetFixed32Map();
          case 13:
            return internalGetSfixed32Map();
          case 14:
            return internalGetFloatmap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableInt32Map();
          case 2:
            return internalGetMutableInt64Map();
          case 3:
            return internalGetMutableUint32Map();
          case 4:
            return internalGetMutableUint64Map();
          case 5:
            return internalGetMutableSint32Map();
          case 6:
            return internalGetMutableSint64Map();
          case 7:
            return internalGetMutableBoolmap();
          case 8:
            return internalGetMutableFixed64Map();
          case 9:
            return internalGetMutableSfixed64Map();
          case 10:
            return internalGetMutableDoublemap();
          case 11:
            return internalGetMutableStringmap();
          case 12:
            return internalGetMutableFixed32Map();
          case 13:
            return internalGetMutableSfixed32Map();
          case 14:
            return internalGetMutableFloatmap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ckm.util.pb.PBTest.MapTest.class, com.ckm.util.pb.PBTest.MapTest.Builder.class);
      }

      // Construct using com.ckm.util.pb.PBTest.MapTest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableInt32Map().clear();
        internalGetMutableInt64Map().clear();
        internalGetMutableUint32Map().clear();
        internalGetMutableUint64Map().clear();
        internalGetMutableSint32Map().clear();
        internalGetMutableSint64Map().clear();
        internalGetMutableBoolmap().clear();
        internalGetMutableFixed64Map().clear();
        internalGetMutableSfixed64Map().clear();
        internalGetMutableDoublemap().clear();
        internalGetMutableStringmap().clear();
        internalGetMutableFixed32Map().clear();
        internalGetMutableSfixed32Map().clear();
        internalGetMutableFloatmap().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ckm.util.pb.PBTest.internal_static_tutorial_MapTest_descriptor;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.MapTest getDefaultInstanceForType() {
        return com.ckm.util.pb.PBTest.MapTest.getDefaultInstance();
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.MapTest build() {
        com.ckm.util.pb.PBTest.MapTest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.ckm.util.pb.PBTest.MapTest buildPartial() {
        com.ckm.util.pb.PBTest.MapTest result = new com.ckm.util.pb.PBTest.MapTest(this);
        int from_bitField0_ = bitField0_;
        result.int32Map_ = internalGetInt32Map();
        result.int32Map_.makeImmutable();
        result.int64Map_ = internalGetInt64Map();
        result.int64Map_.makeImmutable();
        result.uint32Map_ = internalGetUint32Map();
        result.uint32Map_.makeImmutable();
        result.uint64Map_ = internalGetUint64Map();
        result.uint64Map_.makeImmutable();
        result.sint32Map_ = internalGetSint32Map();
        result.sint32Map_.makeImmutable();
        result.sint64Map_ = internalGetSint64Map();
        result.sint64Map_.makeImmutable();
        result.boolmap_ = internalGetBoolmap();
        result.boolmap_.makeImmutable();
        result.fixed64Map_ = internalGetFixed64Map();
        result.fixed64Map_.makeImmutable();
        result.sfixed64Map_ = internalGetSfixed64Map();
        result.sfixed64Map_.makeImmutable();
        result.doublemap_ = internalGetDoublemap();
        result.doublemap_.makeImmutable();
        result.stringmap_ = internalGetStringmap();
        result.stringmap_.makeImmutable();
        result.fixed32Map_ = internalGetFixed32Map();
        result.fixed32Map_.makeImmutable();
        result.sfixed32Map_ = internalGetSfixed32Map();
        result.sfixed32Map_.makeImmutable();
        result.floatmap_ = internalGetFloatmap();
        result.floatmap_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ckm.util.pb.PBTest.MapTest) {
          return mergeFrom((com.ckm.util.pb.PBTest.MapTest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ckm.util.pb.PBTest.MapTest other) {
        if (other == com.ckm.util.pb.PBTest.MapTest.getDefaultInstance()) return this;
        internalGetMutableInt32Map().mergeFrom(
            other.internalGetInt32Map());
        internalGetMutableInt64Map().mergeFrom(
            other.internalGetInt64Map());
        internalGetMutableUint32Map().mergeFrom(
            other.internalGetUint32Map());
        internalGetMutableUint64Map().mergeFrom(
            other.internalGetUint64Map());
        internalGetMutableSint32Map().mergeFrom(
            other.internalGetSint32Map());
        internalGetMutableSint64Map().mergeFrom(
            other.internalGetSint64Map());
        internalGetMutableBoolmap().mergeFrom(
            other.internalGetBoolmap());
        internalGetMutableFixed64Map().mergeFrom(
            other.internalGetFixed64Map());
        internalGetMutableSfixed64Map().mergeFrom(
            other.internalGetSfixed64Map());
        internalGetMutableDoublemap().mergeFrom(
            other.internalGetDoublemap());
        internalGetMutableStringmap().mergeFrom(
            other.internalGetStringmap());
        internalGetMutableFixed32Map().mergeFrom(
            other.internalGetFixed32Map());
        internalGetMutableSfixed32Map().mergeFrom(
            other.internalGetSfixed32Map());
        internalGetMutableFloatmap().mergeFrom(
            other.internalGetFloatmap());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ckm.util.pb.PBTest.MapTest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ckm.util.pb.PBTest.MapTest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> int32Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetInt32Map() {
        if (int32Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Int32MapDefaultEntryHolder.defaultEntry);
        }
        return int32Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableInt32Map() {
        onChanged();;
        if (int32Map_ == null) {
          int32Map_ = com.google.protobuf.MapField.newMapField(
              Int32MapDefaultEntryHolder.defaultEntry);
        }
        if (!int32Map_.isMutable()) {
          int32Map_ = int32Map_.copy();
        }
        return int32Map_;
      }

      public int getInt32MapCount() {
        return internalGetInt32Map().getMap().size();
      }
      /**
       * <code>map&lt;string, int32&gt; int32map = 1;</code>
       */

      public boolean containsInt32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetInt32Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getInt32MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getInt32Map() {
        return getInt32MapMap();
      }
      /**
       * <code>map&lt;string, int32&gt; int32map = 1;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer> getInt32MapMap() {
        return internalGetInt32Map().getMap();
      }
      /**
       * <code>map&lt;string, int32&gt; int32map = 1;</code>
       */

      public int getInt32MapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetInt32Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, int32&gt; int32map = 1;</code>
       */

      public int getInt32MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetInt32Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearInt32Map() {
        internalGetMutableInt32Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; int32map = 1;</code>
       */

      public Builder removeInt32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableInt32Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableInt32Map() {
        return internalGetMutableInt32Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, int32&gt; int32map = 1;</code>
       */
      public Builder putInt32Map(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableInt32Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; int32map = 1;</code>
       */

      public Builder putAllInt32Map(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableInt32Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Long> int64Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetInt64Map() {
        if (int64Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Int64MapDefaultEntryHolder.defaultEntry);
        }
        return int64Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetMutableInt64Map() {
        onChanged();;
        if (int64Map_ == null) {
          int64Map_ = com.google.protobuf.MapField.newMapField(
              Int64MapDefaultEntryHolder.defaultEntry);
        }
        if (!int64Map_.isMutable()) {
          int64Map_ = int64Map_.copy();
        }
        return int64Map_;
      }

      public int getInt64MapCount() {
        return internalGetInt64Map().getMap().size();
      }
      /**
       * <code>map&lt;string, int64&gt; int64map = 2;</code>
       */

      public boolean containsInt64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetInt64Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getInt64MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getInt64Map() {
        return getInt64MapMap();
      }
      /**
       * <code>map&lt;string, int64&gt; int64map = 2;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Long> getInt64MapMap() {
        return internalGetInt64Map().getMap();
      }
      /**
       * <code>map&lt;string, int64&gt; int64map = 2;</code>
       */

      public long getInt64MapOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetInt64Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, int64&gt; int64map = 2;</code>
       */

      public long getInt64MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetInt64Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearInt64Map() {
        internalGetMutableInt64Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, int64&gt; int64map = 2;</code>
       */

      public Builder removeInt64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableInt64Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long>
      getMutableInt64Map() {
        return internalGetMutableInt64Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, int64&gt; int64map = 2;</code>
       */
      public Builder putInt64Map(
          java.lang.String key,
          long value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableInt64Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, int64&gt; int64map = 2;</code>
       */

      public Builder putAllInt64Map(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        internalGetMutableInt64Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> uint32Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetUint32Map() {
        if (uint32Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Uint32MapDefaultEntryHolder.defaultEntry);
        }
        return uint32Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableUint32Map() {
        onChanged();;
        if (uint32Map_ == null) {
          uint32Map_ = com.google.protobuf.MapField.newMapField(
              Uint32MapDefaultEntryHolder.defaultEntry);
        }
        if (!uint32Map_.isMutable()) {
          uint32Map_ = uint32Map_.copy();
        }
        return uint32Map_;
      }

      public int getUint32MapCount() {
        return internalGetUint32Map().getMap().size();
      }
      /**
       * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
       */

      public boolean containsUint32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetUint32Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getUint32MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getUint32Map() {
        return getUint32MapMap();
      }
      /**
       * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer> getUint32MapMap() {
        return internalGetUint32Map().getMap();
      }
      /**
       * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
       */

      public int getUint32MapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetUint32Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
       */

      public int getUint32MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetUint32Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearUint32Map() {
        internalGetMutableUint32Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
       */

      public Builder removeUint32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableUint32Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableUint32Map() {
        return internalGetMutableUint32Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
       */
      public Builder putUint32Map(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableUint32Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, uint32&gt; uint32map = 3;</code>
       */

      public Builder putAllUint32Map(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableUint32Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Long> uint64Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetUint64Map() {
        if (uint64Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Uint64MapDefaultEntryHolder.defaultEntry);
        }
        return uint64Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetMutableUint64Map() {
        onChanged();;
        if (uint64Map_ == null) {
          uint64Map_ = com.google.protobuf.MapField.newMapField(
              Uint64MapDefaultEntryHolder.defaultEntry);
        }
        if (!uint64Map_.isMutable()) {
          uint64Map_ = uint64Map_.copy();
        }
        return uint64Map_;
      }

      public int getUint64MapCount() {
        return internalGetUint64Map().getMap().size();
      }
      /**
       * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
       */

      public boolean containsUint64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetUint64Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getUint64MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getUint64Map() {
        return getUint64MapMap();
      }
      /**
       * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Long> getUint64MapMap() {
        return internalGetUint64Map().getMap();
      }
      /**
       * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
       */

      public long getUint64MapOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetUint64Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
       */

      public long getUint64MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetUint64Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearUint64Map() {
        internalGetMutableUint64Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
       */

      public Builder removeUint64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableUint64Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long>
      getMutableUint64Map() {
        return internalGetMutableUint64Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
       */
      public Builder putUint64Map(
          java.lang.String key,
          long value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableUint64Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, uint64&gt; uint64map = 4;</code>
       */

      public Builder putAllUint64Map(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        internalGetMutableUint64Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> sint32Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetSint32Map() {
        if (sint32Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Sint32MapDefaultEntryHolder.defaultEntry);
        }
        return sint32Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableSint32Map() {
        onChanged();;
        if (sint32Map_ == null) {
          sint32Map_ = com.google.protobuf.MapField.newMapField(
              Sint32MapDefaultEntryHolder.defaultEntry);
        }
        if (!sint32Map_.isMutable()) {
          sint32Map_ = sint32Map_.copy();
        }
        return sint32Map_;
      }

      public int getSint32MapCount() {
        return internalGetSint32Map().getMap().size();
      }
      /**
       * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
       */

      public boolean containsSint32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetSint32Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getSint32MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getSint32Map() {
        return getSint32MapMap();
      }
      /**
       * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer> getSint32MapMap() {
        return internalGetSint32Map().getMap();
      }
      /**
       * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
       */

      public int getSint32MapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetSint32Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
       */

      public int getSint32MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetSint32Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearSint32Map() {
        internalGetMutableSint32Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
       */

      public Builder removeSint32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSint32Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableSint32Map() {
        return internalGetMutableSint32Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
       */
      public Builder putSint32Map(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableSint32Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sint32&gt; sint32map = 5;</code>
       */

      public Builder putAllSint32Map(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableSint32Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Long> sint64Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetSint64Map() {
        if (sint64Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Sint64MapDefaultEntryHolder.defaultEntry);
        }
        return sint64Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetMutableSint64Map() {
        onChanged();;
        if (sint64Map_ == null) {
          sint64Map_ = com.google.protobuf.MapField.newMapField(
              Sint64MapDefaultEntryHolder.defaultEntry);
        }
        if (!sint64Map_.isMutable()) {
          sint64Map_ = sint64Map_.copy();
        }
        return sint64Map_;
      }

      public int getSint64MapCount() {
        return internalGetSint64Map().getMap().size();
      }
      /**
       * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
       */

      public boolean containsSint64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetSint64Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getSint64MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getSint64Map() {
        return getSint64MapMap();
      }
      /**
       * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Long> getSint64MapMap() {
        return internalGetSint64Map().getMap();
      }
      /**
       * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
       */

      public long getSint64MapOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetSint64Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
       */

      public long getSint64MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetSint64Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearSint64Map() {
        internalGetMutableSint64Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
       */

      public Builder removeSint64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSint64Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long>
      getMutableSint64Map() {
        return internalGetMutableSint64Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
       */
      public Builder putSint64Map(
          java.lang.String key,
          long value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableSint64Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sint64&gt; sint64map = 6;</code>
       */

      public Builder putAllSint64Map(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        internalGetMutableSint64Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Boolean> boolmap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Boolean>
      internalGetBoolmap() {
        if (boolmap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              BoolmapDefaultEntryHolder.defaultEntry);
        }
        return boolmap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Boolean>
      internalGetMutableBoolmap() {
        onChanged();;
        if (boolmap_ == null) {
          boolmap_ = com.google.protobuf.MapField.newMapField(
              BoolmapDefaultEntryHolder.defaultEntry);
        }
        if (!boolmap_.isMutable()) {
          boolmap_ = boolmap_.copy();
        }
        return boolmap_;
      }

      public int getBoolmapCount() {
        return internalGetBoolmap().getMap().size();
      }
      /**
       * <code>map&lt;string, bool&gt; boolmap = 7;</code>
       */

      public boolean containsBoolmap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetBoolmap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getBoolmapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Boolean> getBoolmap() {
        return getBoolmapMap();
      }
      /**
       * <code>map&lt;string, bool&gt; boolmap = 7;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Boolean> getBoolmapMap() {
        return internalGetBoolmap().getMap();
      }
      /**
       * <code>map&lt;string, bool&gt; boolmap = 7;</code>
       */

      public boolean getBoolmapOrDefault(
          java.lang.String key,
          boolean defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Boolean> map =
            internalGetBoolmap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, bool&gt; boolmap = 7;</code>
       */

      public boolean getBoolmapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Boolean> map =
            internalGetBoolmap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearBoolmap() {
        internalGetMutableBoolmap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, bool&gt; boolmap = 7;</code>
       */

      public Builder removeBoolmap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableBoolmap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Boolean>
      getMutableBoolmap() {
        return internalGetMutableBoolmap().getMutableMap();
      }
      /**
       * <code>map&lt;string, bool&gt; boolmap = 7;</code>
       */
      public Builder putBoolmap(
          java.lang.String key,
          boolean value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableBoolmap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, bool&gt; boolmap = 7;</code>
       */

      public Builder putAllBoolmap(
          java.util.Map<java.lang.String, java.lang.Boolean> values) {
        internalGetMutableBoolmap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Long> fixed64Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetFixed64Map() {
        if (fixed64Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Fixed64MapDefaultEntryHolder.defaultEntry);
        }
        return fixed64Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetMutableFixed64Map() {
        onChanged();;
        if (fixed64Map_ == null) {
          fixed64Map_ = com.google.protobuf.MapField.newMapField(
              Fixed64MapDefaultEntryHolder.defaultEntry);
        }
        if (!fixed64Map_.isMutable()) {
          fixed64Map_ = fixed64Map_.copy();
        }
        return fixed64Map_;
      }

      public int getFixed64MapCount() {
        return internalGetFixed64Map().getMap().size();
      }
      /**
       * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
       */

      public boolean containsFixed64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetFixed64Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getFixed64MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getFixed64Map() {
        return getFixed64MapMap();
      }
      /**
       * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Long> getFixed64MapMap() {
        return internalGetFixed64Map().getMap();
      }
      /**
       * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
       */

      public long getFixed64MapOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetFixed64Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
       */

      public long getFixed64MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetFixed64Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearFixed64Map() {
        internalGetMutableFixed64Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
       */

      public Builder removeFixed64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableFixed64Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long>
      getMutableFixed64Map() {
        return internalGetMutableFixed64Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
       */
      public Builder putFixed64Map(
          java.lang.String key,
          long value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableFixed64Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, fixed64&gt; fixed64map = 8;</code>
       */

      public Builder putAllFixed64Map(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        internalGetMutableFixed64Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Long> sfixed64Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetSfixed64Map() {
        if (sfixed64Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Sfixed64MapDefaultEntryHolder.defaultEntry);
        }
        return sfixed64Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
      internalGetMutableSfixed64Map() {
        onChanged();;
        if (sfixed64Map_ == null) {
          sfixed64Map_ = com.google.protobuf.MapField.newMapField(
              Sfixed64MapDefaultEntryHolder.defaultEntry);
        }
        if (!sfixed64Map_.isMutable()) {
          sfixed64Map_ = sfixed64Map_.copy();
        }
        return sfixed64Map_;
      }

      public int getSfixed64MapCount() {
        return internalGetSfixed64Map().getMap().size();
      }
      /**
       * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
       */

      public boolean containsSfixed64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetSfixed64Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getSfixed64MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getSfixed64Map() {
        return getSfixed64MapMap();
      }
      /**
       * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Long> getSfixed64MapMap() {
        return internalGetSfixed64Map().getMap();
      }
      /**
       * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
       */

      public long getSfixed64MapOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetSfixed64Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
       */

      public long getSfixed64MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetSfixed64Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearSfixed64Map() {
        internalGetMutableSfixed64Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
       */

      public Builder removeSfixed64Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSfixed64Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long>
      getMutableSfixed64Map() {
        return internalGetMutableSfixed64Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
       */
      public Builder putSfixed64Map(
          java.lang.String key,
          long value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableSfixed64Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sfixed64&gt; sfixed64map = 9;</code>
       */

      public Builder putAllSfixed64Map(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        internalGetMutableSfixed64Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Double> doublemap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
      internalGetDoublemap() {
        if (doublemap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              DoublemapDefaultEntryHolder.defaultEntry);
        }
        return doublemap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
      internalGetMutableDoublemap() {
        onChanged();;
        if (doublemap_ == null) {
          doublemap_ = com.google.protobuf.MapField.newMapField(
              DoublemapDefaultEntryHolder.defaultEntry);
        }
        if (!doublemap_.isMutable()) {
          doublemap_ = doublemap_.copy();
        }
        return doublemap_;
      }

      public int getDoublemapCount() {
        return internalGetDoublemap().getMap().size();
      }
      /**
       * <code>map&lt;string, double&gt; doublemap = 10;</code>
       */

      public boolean containsDoublemap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetDoublemap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getDoublemapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Double> getDoublemap() {
        return getDoublemapMap();
      }
      /**
       * <code>map&lt;string, double&gt; doublemap = 10;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Double> getDoublemapMap() {
        return internalGetDoublemap().getMap();
      }
      /**
       * <code>map&lt;string, double&gt; doublemap = 10;</code>
       */

      public double getDoublemapOrDefault(
          java.lang.String key,
          double defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Double> map =
            internalGetDoublemap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, double&gt; doublemap = 10;</code>
       */

      public double getDoublemapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Double> map =
            internalGetDoublemap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearDoublemap() {
        internalGetMutableDoublemap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, double&gt; doublemap = 10;</code>
       */

      public Builder removeDoublemap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableDoublemap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Double>
      getMutableDoublemap() {
        return internalGetMutableDoublemap().getMutableMap();
      }
      /**
       * <code>map&lt;string, double&gt; doublemap = 10;</code>
       */
      public Builder putDoublemap(
          java.lang.String key,
          double value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableDoublemap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, double&gt; doublemap = 10;</code>
       */

      public Builder putAllDoublemap(
          java.util.Map<java.lang.String, java.lang.Double> values) {
        internalGetMutableDoublemap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> stringmap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetStringmap() {
        if (stringmap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StringmapDefaultEntryHolder.defaultEntry);
        }
        return stringmap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableStringmap() {
        onChanged();;
        if (stringmap_ == null) {
          stringmap_ = com.google.protobuf.MapField.newMapField(
              StringmapDefaultEntryHolder.defaultEntry);
        }
        if (!stringmap_.isMutable()) {
          stringmap_ = stringmap_.copy();
        }
        return stringmap_;
      }

      public int getStringmapCount() {
        return internalGetStringmap().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; stringmap = 11;</code>
       */

      public boolean containsStringmap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetStringmap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStringmapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getStringmap() {
        return getStringmapMap();
      }
      /**
       * <code>map&lt;string, string&gt; stringmap = 11;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getStringmapMap() {
        return internalGetStringmap().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; stringmap = 11;</code>
       */

      public java.lang.String getStringmapOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetStringmap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; stringmap = 11;</code>
       */

      public java.lang.String getStringmapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetStringmap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearStringmap() {
        internalGetMutableStringmap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; stringmap = 11;</code>
       */

      public Builder removeStringmap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableStringmap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableStringmap() {
        return internalGetMutableStringmap().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; stringmap = 11;</code>
       */
      public Builder putStringmap(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableStringmap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; stringmap = 11;</code>
       */

      public Builder putAllStringmap(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableStringmap().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> fixed32Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetFixed32Map() {
        if (fixed32Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Fixed32MapDefaultEntryHolder.defaultEntry);
        }
        return fixed32Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableFixed32Map() {
        onChanged();;
        if (fixed32Map_ == null) {
          fixed32Map_ = com.google.protobuf.MapField.newMapField(
              Fixed32MapDefaultEntryHolder.defaultEntry);
        }
        if (!fixed32Map_.isMutable()) {
          fixed32Map_ = fixed32Map_.copy();
        }
        return fixed32Map_;
      }

      public int getFixed32MapCount() {
        return internalGetFixed32Map().getMap().size();
      }
      /**
       * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
       */

      public boolean containsFixed32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetFixed32Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getFixed32MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getFixed32Map() {
        return getFixed32MapMap();
      }
      /**
       * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer> getFixed32MapMap() {
        return internalGetFixed32Map().getMap();
      }
      /**
       * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
       */

      public int getFixed32MapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetFixed32Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
       */

      public int getFixed32MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetFixed32Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearFixed32Map() {
        internalGetMutableFixed32Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
       */

      public Builder removeFixed32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableFixed32Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableFixed32Map() {
        return internalGetMutableFixed32Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
       */
      public Builder putFixed32Map(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableFixed32Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, fixed32&gt; fixed32map = 12;</code>
       */

      public Builder putAllFixed32Map(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableFixed32Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> sfixed32Map_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetSfixed32Map() {
        if (sfixed32Map_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              Sfixed32MapDefaultEntryHolder.defaultEntry);
        }
        return sfixed32Map_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableSfixed32Map() {
        onChanged();;
        if (sfixed32Map_ == null) {
          sfixed32Map_ = com.google.protobuf.MapField.newMapField(
              Sfixed32MapDefaultEntryHolder.defaultEntry);
        }
        if (!sfixed32Map_.isMutable()) {
          sfixed32Map_ = sfixed32Map_.copy();
        }
        return sfixed32Map_;
      }

      public int getSfixed32MapCount() {
        return internalGetSfixed32Map().getMap().size();
      }
      /**
       * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
       */

      public boolean containsSfixed32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetSfixed32Map().getMap().containsKey(key);
      }
      /**
       * Use {@link #getSfixed32MapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getSfixed32Map() {
        return getSfixed32MapMap();
      }
      /**
       * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer> getSfixed32MapMap() {
        return internalGetSfixed32Map().getMap();
      }
      /**
       * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
       */

      public int getSfixed32MapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetSfixed32Map().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
       */

      public int getSfixed32MapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetSfixed32Map().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearSfixed32Map() {
        internalGetMutableSfixed32Map().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
       */

      public Builder removeSfixed32Map(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSfixed32Map().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableSfixed32Map() {
        return internalGetMutableSfixed32Map().getMutableMap();
      }
      /**
       * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
       */
      public Builder putSfixed32Map(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableSfixed32Map().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sfixed32&gt; sfixed32map = 13;</code>
       */

      public Builder putAllSfixed32Map(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableSfixed32Map().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Float> floatmap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Float>
      internalGetFloatmap() {
        if (floatmap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              FloatmapDefaultEntryHolder.defaultEntry);
        }
        return floatmap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Float>
      internalGetMutableFloatmap() {
        onChanged();;
        if (floatmap_ == null) {
          floatmap_ = com.google.protobuf.MapField.newMapField(
              FloatmapDefaultEntryHolder.defaultEntry);
        }
        if (!floatmap_.isMutable()) {
          floatmap_ = floatmap_.copy();
        }
        return floatmap_;
      }

      public int getFloatmapCount() {
        return internalGetFloatmap().getMap().size();
      }
      /**
       * <code>map&lt;string, float&gt; floatmap = 14;</code>
       */

      public boolean containsFloatmap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetFloatmap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getFloatmapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Float> getFloatmap() {
        return getFloatmapMap();
      }
      /**
       * <code>map&lt;string, float&gt; floatmap = 14;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Float> getFloatmapMap() {
        return internalGetFloatmap().getMap();
      }
      /**
       * <code>map&lt;string, float&gt; floatmap = 14;</code>
       */

      public float getFloatmapOrDefault(
          java.lang.String key,
          float defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Float> map =
            internalGetFloatmap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, float&gt; floatmap = 14;</code>
       */

      public float getFloatmapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Float> map =
            internalGetFloatmap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearFloatmap() {
        internalGetMutableFloatmap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, float&gt; floatmap = 14;</code>
       */

      public Builder removeFloatmap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableFloatmap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Float>
      getMutableFloatmap() {
        return internalGetMutableFloatmap().getMutableMap();
      }
      /**
       * <code>map&lt;string, float&gt; floatmap = 14;</code>
       */
      public Builder putFloatmap(
          java.lang.String key,
          float value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableFloatmap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, float&gt; floatmap = 14;</code>
       */

      public Builder putAllFloatmap(
          java.util.Map<java.lang.String, java.lang.Float> values) {
        internalGetMutableFloatmap().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tutorial.MapTest)
    }

    // @@protoc_insertion_point(class_scope:tutorial.MapTest)
    private static final com.ckm.util.pb.PBTest.MapTest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.ckm.util.pb.PBTest.MapTest();
    }

    public static com.ckm.util.pb.PBTest.MapTest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<MapTest>
        PARSER = new com.google.protobuf.AbstractParser<MapTest>() {
      @java.lang.Override
      public MapTest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MapTest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MapTest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MapTest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.ckm.util.pb.PBTest.MapTest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_TestAllType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_TestAllType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_TestAllType_BaseMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_TestAllType_BaseMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_TestAllType_XMessageMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_TestAllType_XMessageMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_XMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_XMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ListTest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_ListTest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Int32mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Int32mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Int64mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Int64mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Uint32mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Uint32mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Uint64mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Uint64mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Sint32mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Sint32mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Sint64mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Sint64mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_BoolmapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_BoolmapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Fixed64mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Fixed64mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Sfixed64mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Sfixed64mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_DoublemapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_DoublemapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_StringmapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_StringmapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Fixed32mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Fixed32mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_Sfixed32mapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_Sfixed32mapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MapTest_FloatmapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tutorial_MapTest_FloatmapEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ntest.proto\022\010tutorial\"\317\004\n\013TestAllType\022\r" +
      "\n\005int32\030\001 \001(\005\022\r\n\005int64\030\002 \001(\003\022\016\n\006uint32\030\003" +
      " \001(\r\022\016\n\006uint64\030\004 \001(\004\022\016\n\006sint32\030\005 \001(\021\022\016\n\006" +
      "sint64\030\006 \001(\022\022\014\n\004bool\030\007 \001(\010\022\017\n\007fixed64\030\t " +
      "\001(\006\022\020\n\010sfixed64\030\n \001(\020\022\016\n\006double\030\013 \001(\001\022\016\n" +
      "\006string\030\014 \001(\t\022\017\n\007fixed32\030\016 \001(\007\022\020\n\010sfixed" +
      "32\030\017 \001(\017\022\r\n\005float\030\020 \001(\002\0223\n\007baseMap\030\021 \003(\013" +
      "2\".tutorial.TestAllType.BaseMapEntry\022%\n\t" +
      "x_message\030\022 \001(\0132\022.tutorial.XMessage\022 \n\004t" +
      "ype\030\023 \001(\0162\022.tutorial.EnumType\022*\n\016x_messa" +
      "ge_list\030\024 \003(\0132\022.tutorial.XMessage\022=\n\rx_m" +
      "essage_map\030\025 \003(\0132&.tutorial.TestAllType." +
      "XMessageMapEntry\032.\n\014BaseMapEntry\022\013\n\003key\030" +
      "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032F\n\020XMessageMapE" +
      "ntry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.tutor" +
      "ial.XMessage:\0028\001\"1\n\010XMessage\022\n\n\002id\030\001 \001(\t" +
      "\022\014\n\004name\030\002 \001(\t\022\013\n\003age\030\003 \001(\005\"\353\001\n\010ListTest" +
      "\022\r\n\005int32\030\001 \003(\005\022\r\n\005int64\030\002 \003(\003\022\016\n\006uint32" +
      "\030\003 \003(\r\022\016\n\006uint64\030\004 \003(\004\022\016\n\006sint32\030\005 \003(\021\022\016" +
      "\n\006sint64\030\006 \003(\022\022\014\n\004bool\030\007 \003(\010\022\017\n\007fixed64\030" +
      "\t \003(\006\022\020\n\010sfixed64\030\n \003(\020\022\016\n\006double\030\013 \003(\001\022" +
      "\016\n\006string\030\014 \003(\t\022\017\n\007fixed32\030\016 \003(\007\022\020\n\010sfix" +
      "ed32\030\017 \003(\017\022\r\n\005float\030\020 \003(\002\"\256\013\n\007MapTest\0221\n" +
      "\010int32map\030\001 \003(\0132\037.tutorial.MapTest.Int32" +
      "mapEntry\0221\n\010int64map\030\002 \003(\0132\037.tutorial.Ma" +
      "pTest.Int64mapEntry\0223\n\tuint32map\030\003 \003(\0132 " +
      ".tutorial.MapTest.Uint32mapEntry\0223\n\tuint" +
      "64map\030\004 \003(\0132 .tutorial.MapTest.Uint64map" +
      "Entry\0223\n\tsint32map\030\005 \003(\0132 .tutorial.MapT" +
      "est.Sint32mapEntry\0223\n\tsint64map\030\006 \003(\0132 ." +
      "tutorial.MapTest.Sint64mapEntry\022/\n\007boolm" +
      "ap\030\007 \003(\0132\036.tutorial.MapTest.BoolmapEntry" +
      "\0225\n\nfixed64map\030\010 \003(\0132!.tutorial.MapTest." +
      "Fixed64mapEntry\0227\n\013sfixed64map\030\t \003(\0132\".t" +
      "utorial.MapTest.Sfixed64mapEntry\0223\n\tdoub" +
      "lemap\030\n \003(\0132 .tutorial.MapTest.Doublemap" +
      "Entry\0223\n\tstringmap\030\013 \003(\0132 .tutorial.MapT" +
      "est.StringmapEntry\0225\n\nfixed32map\030\014 \003(\0132!" +
      ".tutorial.MapTest.Fixed32mapEntry\0227\n\013sfi" +
      "xed32map\030\r \003(\0132\".tutorial.MapTest.Sfixed" +
      "32mapEntry\0221\n\010floatmap\030\016 \003(\0132\037.tutorial." +
      "MapTest.FloatmapEntry\032/\n\rInt32mapEntry\022\013" +
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\032/\n\rInt64m" +
      "apEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032" +
      "0\n\016Uint32mapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030" +
      "\002 \001(\r:\0028\001\0320\n\016Uint64mapEntry\022\013\n\003key\030\001 \001(\t" +
      "\022\r\n\005value\030\002 \001(\004:\0028\001\0320\n\016Sint32mapEntry\022\013\n" +
      "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\021:\0028\001\0320\n\016Sint64m" +
      "apEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\022:\0028\001\032" +
      ".\n\014BoolmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 " +
      "\001(\010:\0028\001\0321\n\017Fixed64mapEntry\022\013\n\003key\030\001 \001(\t\022" +
      "\r\n\005value\030\002 \001(\006:\0028\001\0322\n\020Sfixed64mapEntry\022\013" +
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\020:\0028\001\0320\n\016Double" +
      "mapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001" +
      "\0320\n\016StringmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value" +
      "\030\002 \001(\t:\0028\001\0321\n\017Fixed32mapEntry\022\013\n\003key\030\001 \001" +
      "(\t\022\r\n\005value\030\002 \001(\007:\0028\001\0322\n\020Sfixed32mapEntr" +
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\017:\0028\001\032/\n\rFlo" +
      "atmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\002" +
      "8\001**\n\010EnumType\022\n\n\006MOBILE\020\000\022\010\n\004HOME\020\001\022\010\n\004" +
      "WORK\020\002B\031\n\017com.ckm.util.pbB\006PBTest"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_tutorial_TestAllType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tutorial_TestAllType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_TestAllType_descriptor,
        new java.lang.String[] { "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Bool", "Fixed64", "Sfixed64", "Double", "String", "Fixed32", "Sfixed32", "Float", "BaseMap", "XMessage", "Type", "XMessageList", "XMessageMap", });
    internal_static_tutorial_TestAllType_BaseMapEntry_descriptor =
      internal_static_tutorial_TestAllType_descriptor.getNestedTypes().get(0);
    internal_static_tutorial_TestAllType_BaseMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_TestAllType_BaseMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_TestAllType_XMessageMapEntry_descriptor =
      internal_static_tutorial_TestAllType_descriptor.getNestedTypes().get(1);
    internal_static_tutorial_TestAllType_XMessageMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_TestAllType_XMessageMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_XMessage_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_tutorial_XMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_XMessage_descriptor,
        new java.lang.String[] { "Id", "Name", "Age", });
    internal_static_tutorial_ListTest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_tutorial_ListTest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_ListTest_descriptor,
        new java.lang.String[] { "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Bool", "Fixed64", "Sfixed64", "Double", "String", "Fixed32", "Sfixed32", "Float", });
    internal_static_tutorial_MapTest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_tutorial_MapTest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_descriptor,
        new java.lang.String[] { "Int32Map", "Int64Map", "Uint32Map", "Uint64Map", "Sint32Map", "Sint64Map", "Boolmap", "Fixed64Map", "Sfixed64Map", "Doublemap", "Stringmap", "Fixed32Map", "Sfixed32Map", "Floatmap", });
    internal_static_tutorial_MapTest_Int32mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(0);
    internal_static_tutorial_MapTest_Int32mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Int32mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Int64mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(1);
    internal_static_tutorial_MapTest_Int64mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Int64mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Uint32mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(2);
    internal_static_tutorial_MapTest_Uint32mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Uint32mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Uint64mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(3);
    internal_static_tutorial_MapTest_Uint64mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Uint64mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Sint32mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(4);
    internal_static_tutorial_MapTest_Sint32mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Sint32mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Sint64mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(5);
    internal_static_tutorial_MapTest_Sint64mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Sint64mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_BoolmapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(6);
    internal_static_tutorial_MapTest_BoolmapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_BoolmapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Fixed64mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(7);
    internal_static_tutorial_MapTest_Fixed64mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Fixed64mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Sfixed64mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(8);
    internal_static_tutorial_MapTest_Sfixed64mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Sfixed64mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_DoublemapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(9);
    internal_static_tutorial_MapTest_DoublemapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_DoublemapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_StringmapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(10);
    internal_static_tutorial_MapTest_StringmapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_StringmapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Fixed32mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(11);
    internal_static_tutorial_MapTest_Fixed32mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Fixed32mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_Sfixed32mapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(12);
    internal_static_tutorial_MapTest_Sfixed32mapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_Sfixed32mapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_tutorial_MapTest_FloatmapEntry_descriptor =
      internal_static_tutorial_MapTest_descriptor.getNestedTypes().get(13);
    internal_static_tutorial_MapTest_FloatmapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tutorial_MapTest_FloatmapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
